# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawTransactionEventsClient
from ..types.transaction_state import TransactionState
from ..types.transaction_updatable import TransactionUpdatable
from ..types.device_data import DeviceData
from ..core.request_options import RequestOptions
from ..types.transaction_event_monitoring_result import TransactionEventMonitoringResult
from ..types.transaction_event_with_rules_result import TransactionEventWithRulesResult
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawTransactionEventsClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class TransactionEventsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawTransactionEventsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawTransactionEventsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawTransactionEventsClient
        """
        return self._raw_client

    def create(
        self,
        *,
        transaction_state: TransactionState,
        timestamp: float,
        transaction_id: str,
        event_id: typing.Optional[str] = OMIT,
        reason: typing.Optional[str] = OMIT,
        event_description: typing.Optional[str] = OMIT,
        updated_transaction_attributes: typing.Optional[TransactionUpdatable] = OMIT,
        meta_data: typing.Optional[DeviceData] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TransactionEventMonitoringResult:
        """
        ## POST Transaction Events

        `/events/transaction` endpoint allows you to operate on the [Transaction Events entity.](/guides/overview/entities#transaction-event)

        Transaction events are created after the initial `POST /transactions` call (which creates a transaction) and are used to:

        * Update the STATE of the transaction, using the `transactionState` field and manage the [Transaction Lifecycle](/guides/overview/entities#transaction-lifecycle-through-transaction-events)
        * Update the transaction details, using the `updatedTransactionAttributes` field.

        > If you have neither of the above two use cases, you do not need to use transaction events.

        ### Payload

        Each transaction event needs three mandatory fields:

        * `transactionState` - STATE of the transaction -> value is set to `CREATED` after `POST /transactions` call
        * `timestamp`- the timestamp of when the event was created or occured in your system
        * `transactionId` - The ID of the transaction for which this event is generated.

        In order to make individual events retrievable, you also need to pass in a unique `eventId` to the request body.

        Parameters
        ----------
        transaction_state : TransactionState

        timestamp : float
            Timestamp of the event

        transaction_id : str
            Transaction ID the event pertains to

        event_id : typing.Optional[str]
            Unique event ID

        reason : typing.Optional[str]
            Reason for the event or a state change

        event_description : typing.Optional[str]
            Event description

        updated_transaction_attributes : typing.Optional[TransactionUpdatable]

        meta_data : typing.Optional[DeviceData]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TransactionEventMonitoringResult
            Created

        Examples
        --------
        from flagright import DeviceData, Flagright

        client = Flagright(
            api_key="YOUR_API_KEY",
        )
        client.transaction_events.create(
            transaction_state="SUCCESSFUL",
            timestamp=1431231244001.0,
            transaction_id="443dea26147a406b957d9ee3a1247b11",
            event_id="aaeeb166147a406b957dd9147a406b957",
            event_description="Transaction created",
            meta_data=DeviceData(
                battery_level=76.3,
                device_latitude=13.009711,
                device_longitude=76.102898,
                ip_address="79.144.2.20",
                vpn_used=True,
            ),
        )
        """
        response = self._raw_client.create(
            transaction_state=transaction_state,
            timestamp=timestamp,
            transaction_id=transaction_id,
            event_id=event_id,
            reason=reason,
            event_description=event_description,
            updated_transaction_attributes=updated_transaction_attributes,
            meta_data=meta_data,
            request_options=request_options,
        )
        return response.data

    def get(
        self, event_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TransactionEventWithRulesResult:
        """
        ### GET Transaction Events

        `/events/transaction` endpoint allows you to operate on the [Transaction Events entity.](/guides/overview/entities#transaction-event).

        You can retrieve any transaction event you created using the [POST Transaction Events](/api-reference/api-reference/transaction-events/create) call.

        Parameters
        ----------
        event_id : str
            Unique Transaction Identifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TransactionEventWithRulesResult
            OK

        Examples
        --------
        from flagright import Flagright

        client = Flagright(
            api_key="YOUR_API_KEY",
        )
        client.transaction_events.get(
            event_id="eventId",
        )
        """
        response = self._raw_client.get(event_id, request_options=request_options)
        return response.data


class AsyncTransactionEventsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawTransactionEventsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawTransactionEventsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawTransactionEventsClient
        """
        return self._raw_client

    async def create(
        self,
        *,
        transaction_state: TransactionState,
        timestamp: float,
        transaction_id: str,
        event_id: typing.Optional[str] = OMIT,
        reason: typing.Optional[str] = OMIT,
        event_description: typing.Optional[str] = OMIT,
        updated_transaction_attributes: typing.Optional[TransactionUpdatable] = OMIT,
        meta_data: typing.Optional[DeviceData] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> TransactionEventMonitoringResult:
        """
        ## POST Transaction Events

        `/events/transaction` endpoint allows you to operate on the [Transaction Events entity.](/guides/overview/entities#transaction-event)

        Transaction events are created after the initial `POST /transactions` call (which creates a transaction) and are used to:

        * Update the STATE of the transaction, using the `transactionState` field and manage the [Transaction Lifecycle](/guides/overview/entities#transaction-lifecycle-through-transaction-events)
        * Update the transaction details, using the `updatedTransactionAttributes` field.

        > If you have neither of the above two use cases, you do not need to use transaction events.

        ### Payload

        Each transaction event needs three mandatory fields:

        * `transactionState` - STATE of the transaction -> value is set to `CREATED` after `POST /transactions` call
        * `timestamp`- the timestamp of when the event was created or occured in your system
        * `transactionId` - The ID of the transaction for which this event is generated.

        In order to make individual events retrievable, you also need to pass in a unique `eventId` to the request body.

        Parameters
        ----------
        transaction_state : TransactionState

        timestamp : float
            Timestamp of the event

        transaction_id : str
            Transaction ID the event pertains to

        event_id : typing.Optional[str]
            Unique event ID

        reason : typing.Optional[str]
            Reason for the event or a state change

        event_description : typing.Optional[str]
            Event description

        updated_transaction_attributes : typing.Optional[TransactionUpdatable]

        meta_data : typing.Optional[DeviceData]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TransactionEventMonitoringResult
            Created

        Examples
        --------
        import asyncio

        from flagright import AsyncFlagright, DeviceData

        client = AsyncFlagright(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.transaction_events.create(
                transaction_state="SUCCESSFUL",
                timestamp=1431231244001.0,
                transaction_id="443dea26147a406b957d9ee3a1247b11",
                event_id="aaeeb166147a406b957dd9147a406b957",
                event_description="Transaction created",
                meta_data=DeviceData(
                    battery_level=76.3,
                    device_latitude=13.009711,
                    device_longitude=76.102898,
                    ip_address="79.144.2.20",
                    vpn_used=True,
                ),
            )


        asyncio.run(main())
        """
        response = await self._raw_client.create(
            transaction_state=transaction_state,
            timestamp=timestamp,
            transaction_id=transaction_id,
            event_id=event_id,
            reason=reason,
            event_description=event_description,
            updated_transaction_attributes=updated_transaction_attributes,
            meta_data=meta_data,
            request_options=request_options,
        )
        return response.data

    async def get(
        self, event_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> TransactionEventWithRulesResult:
        """
        ### GET Transaction Events

        `/events/transaction` endpoint allows you to operate on the [Transaction Events entity.](/guides/overview/entities#transaction-event).

        You can retrieve any transaction event you created using the [POST Transaction Events](/api-reference/api-reference/transaction-events/create) call.

        Parameters
        ----------
        event_id : str
            Unique Transaction Identifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        TransactionEventWithRulesResult
            OK

        Examples
        --------
        import asyncio

        from flagright import AsyncFlagright

        client = AsyncFlagright(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.transaction_events.get(
                event_id="eventId",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get(event_id, request_options=request_options)
        return response.data
