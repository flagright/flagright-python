# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..types.transaction_state import TransactionState
from ..types.transaction_updatable import TransactionUpdatable
from ..types.device_data import DeviceData
from ..core.request_options import RequestOptions
from ..core.http_response import HttpResponse
from ..types.transaction_event_monitoring_result import TransactionEventMonitoringResult
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.pydantic_utilities import parse_obj_as
from ..errors.bad_request_error import BadRequestError
from ..types.api_error_response import ApiErrorResponse
from ..errors.unauthorized_error import UnauthorizedError
from ..errors.too_many_requests_error import TooManyRequestsError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.transaction_event_with_rules_result import TransactionEventWithRulesResult
from ..core.jsonable_encoder import jsonable_encoder
from ..core.client_wrapper import AsyncClientWrapper
from ..core.http_response import AsyncHttpResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawTransactionEventsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        transaction_state: TransactionState,
        timestamp: float,
        transaction_id: str,
        event_id: typing.Optional[str] = OMIT,
        reason: typing.Optional[str] = OMIT,
        event_description: typing.Optional[str] = OMIT,
        updated_transaction_attributes: typing.Optional[TransactionUpdatable] = OMIT,
        meta_data: typing.Optional[DeviceData] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[TransactionEventMonitoringResult]:
        """
        ## POST Transaction Events

        `/events/transaction` endpoint allows you to operate on the [Transaction Events entity.](/guides/overview/entities#transaction-event)

        Transaction events are created after the initial `POST /transactions` call (which creates a transaction) and are used to:

        * Update the STATE of the transaction, using the `transactionState` field and manage the [Transaction Lifecycle](/guides/overview/entities#transaction-lifecycle-through-transaction-events)
        * Update the transaction details, using the `updatedTransactionAttributes` field.

        > If you have neither of the above two use cases, you do not need to use transaction events.

        ### Payload

        Each transaction event needs three mandatory fields:

        * `transactionState` - STATE of the transaction -> value is set to `CREATED` after `POST /transactions` call
        * `timestamp`- the timestamp of when the event was created or occured in your system
        * `transactionId` - The ID of the transaction for which this event is generated.

        In order to make individual events retrievable, you also need to pass in a unique `eventId` to the request body.

        Parameters
        ----------
        transaction_state : TransactionState

        timestamp : float
            Timestamp of the event

        transaction_id : str
            Transaction ID the event pertains to

        event_id : typing.Optional[str]
            Unique event ID

        reason : typing.Optional[str]
            Reason for the event or a state change

        event_description : typing.Optional[str]
            Event description

        updated_transaction_attributes : typing.Optional[TransactionUpdatable]

        meta_data : typing.Optional[DeviceData]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[TransactionEventMonitoringResult]
            Created
        """
        _response = self._client_wrapper.httpx_client.request(
            "events/transaction",
            method="POST",
            json={
                "transactionState": transaction_state,
                "timestamp": timestamp,
                "transactionId": transaction_id,
                "eventId": event_id,
                "reason": reason,
                "eventDescription": event_description,
                "updatedTransactionAttributes": convert_and_respect_annotation_metadata(
                    object_=updated_transaction_attributes, annotation=TransactionUpdatable, direction="write"
                ),
                "metaData": convert_and_respect_annotation_metadata(
                    object_=meta_data, annotation=DeviceData, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    TransactionEventMonitoringResult,
                    parse_obj_as(
                        type_=TransactionEventMonitoringResult,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        ApiErrorResponse,
                        parse_obj_as(
                            type_=ApiErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        ApiErrorResponse,
                        parse_obj_as(
                            type_=ApiErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        ApiErrorResponse,
                        parse_obj_as(
                            type_=ApiErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, event_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[TransactionEventWithRulesResult]:
        """
        ### GET Transaction Events

        `/events/transaction` endpoint allows you to operate on the [Transaction Events entity.](/guides/overview/entities#transaction-event).

        You can retrieve any transaction event you created using the [POST Transaction Events](/api-reference/api-reference/transaction-events/create) call.

        Parameters
        ----------
        event_id : str
            Unique Transaction Identifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[TransactionEventWithRulesResult]
            OK
        """
        _response = self._client_wrapper.httpx_client.request(
            f"events/transaction/{jsonable_encoder(event_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    TransactionEventWithRulesResult,
                    parse_obj_as(
                        type_=TransactionEventWithRulesResult,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        ApiErrorResponse,
                        parse_obj_as(
                            type_=ApiErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        ApiErrorResponse,
                        parse_obj_as(
                            type_=ApiErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        ApiErrorResponse,
                        parse_obj_as(
                            type_=ApiErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncRawTransactionEventsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        transaction_state: TransactionState,
        timestamp: float,
        transaction_id: str,
        event_id: typing.Optional[str] = OMIT,
        reason: typing.Optional[str] = OMIT,
        event_description: typing.Optional[str] = OMIT,
        updated_transaction_attributes: typing.Optional[TransactionUpdatable] = OMIT,
        meta_data: typing.Optional[DeviceData] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[TransactionEventMonitoringResult]:
        """
        ## POST Transaction Events

        `/events/transaction` endpoint allows you to operate on the [Transaction Events entity.](/guides/overview/entities#transaction-event)

        Transaction events are created after the initial `POST /transactions` call (which creates a transaction) and are used to:

        * Update the STATE of the transaction, using the `transactionState` field and manage the [Transaction Lifecycle](/guides/overview/entities#transaction-lifecycle-through-transaction-events)
        * Update the transaction details, using the `updatedTransactionAttributes` field.

        > If you have neither of the above two use cases, you do not need to use transaction events.

        ### Payload

        Each transaction event needs three mandatory fields:

        * `transactionState` - STATE of the transaction -> value is set to `CREATED` after `POST /transactions` call
        * `timestamp`- the timestamp of when the event was created or occured in your system
        * `transactionId` - The ID of the transaction for which this event is generated.

        In order to make individual events retrievable, you also need to pass in a unique `eventId` to the request body.

        Parameters
        ----------
        transaction_state : TransactionState

        timestamp : float
            Timestamp of the event

        transaction_id : str
            Transaction ID the event pertains to

        event_id : typing.Optional[str]
            Unique event ID

        reason : typing.Optional[str]
            Reason for the event or a state change

        event_description : typing.Optional[str]
            Event description

        updated_transaction_attributes : typing.Optional[TransactionUpdatable]

        meta_data : typing.Optional[DeviceData]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[TransactionEventMonitoringResult]
            Created
        """
        _response = await self._client_wrapper.httpx_client.request(
            "events/transaction",
            method="POST",
            json={
                "transactionState": transaction_state,
                "timestamp": timestamp,
                "transactionId": transaction_id,
                "eventId": event_id,
                "reason": reason,
                "eventDescription": event_description,
                "updatedTransactionAttributes": convert_and_respect_annotation_metadata(
                    object_=updated_transaction_attributes, annotation=TransactionUpdatable, direction="write"
                ),
                "metaData": convert_and_respect_annotation_metadata(
                    object_=meta_data, annotation=DeviceData, direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    TransactionEventMonitoringResult,
                    parse_obj_as(
                        type_=TransactionEventMonitoringResult,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        ApiErrorResponse,
                        parse_obj_as(
                            type_=ApiErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        ApiErrorResponse,
                        parse_obj_as(
                            type_=ApiErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        ApiErrorResponse,
                        parse_obj_as(
                            type_=ApiErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, event_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[TransactionEventWithRulesResult]:
        """
        ### GET Transaction Events

        `/events/transaction` endpoint allows you to operate on the [Transaction Events entity.](/guides/overview/entities#transaction-event).

        You can retrieve any transaction event you created using the [POST Transaction Events](/api-reference/api-reference/transaction-events/create) call.

        Parameters
        ----------
        event_id : str
            Unique Transaction Identifier

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[TransactionEventWithRulesResult]
            OK
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"events/transaction/{jsonable_encoder(event_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    TransactionEventWithRulesResult,
                    parse_obj_as(
                        type_=TransactionEventWithRulesResult,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        ApiErrorResponse,
                        parse_obj_as(
                            type_=ApiErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        ApiErrorResponse,
                        parse_obj_as(
                            type_=ApiErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        ApiErrorResponse,
                        parse_obj_as(
                            type_=ApiErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
