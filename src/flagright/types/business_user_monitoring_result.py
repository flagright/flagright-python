# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .executed_rules_result import ExecutedRulesResult
from .hit_rules_details import HitRulesDetails
from .user_risk_score_details import UserRiskScoreDetails


class BusinessUserMonitoringResult(UniversalBaseModel):
    """
    Model for business user risk score response
    """

    user_id: typing_extensions.Annotated[str, FieldMetadata(alias="userId")] = pydantic.Field()
    """
    user ID the risk score pertains to
    """

    risk_score_details: typing_extensions.Annotated[
        typing.Optional[UserRiskScoreDetails], FieldMetadata(alias="riskScoreDetails")
    ] = None
    hit_rules: typing_extensions.Annotated[
        typing.Optional[typing.List[HitRulesDetails]], FieldMetadata(alias="hitRules")
    ] = None
    executed_rules: typing_extensions.Annotated[
        typing.Optional[typing.List[ExecutedRulesResult]], FieldMetadata(alias="executedRules")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
