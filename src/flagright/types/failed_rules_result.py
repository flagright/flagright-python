# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ..core.serialization import FieldMetadata
import pydantic
from .rule_failure_exception import RuleFailureException
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import typing


class FailedRulesResult(UniversalBaseModel):
    """
    Model for list of rules failed execution. It means rules could not be run
    """

    rule_id: typing_extensions.Annotated[str, FieldMetadata(alias="ruleId")] = pydantic.Field()
    """
    Unique rule identifier
    """

    rule_name: typing_extensions.Annotated[str, FieldMetadata(alias="ruleName")] = pydantic.Field()
    """
    Name of the rule
    """

    rule_description: typing_extensions.Annotated[str, FieldMetadata(alias="ruleDescription")] = pydantic.Field()
    """
    Description of the rule
    """

    failure_exception: typing_extensions.Annotated[RuleFailureException, FieldMetadata(alias="failureException")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
