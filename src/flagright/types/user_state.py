# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class UserState(str, enum.Enum):
    UNACCEPTABLE = "UNACCEPTABLE"
    TERMINATED = "TERMINATED"
    ACTIVE = "ACTIVE"
    DORMANT = "DORMANT"
    CREATED = "CREATED"
    SUSPENDED = "SUSPENDED"
    BLOCKED = "BLOCKED"

    def visit(
        self,
        unacceptable: typing.Callable[[], T_Result],
        terminated: typing.Callable[[], T_Result],
        active: typing.Callable[[], T_Result],
        dormant: typing.Callable[[], T_Result],
        created: typing.Callable[[], T_Result],
        suspended: typing.Callable[[], T_Result],
        blocked: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is UserState.UNACCEPTABLE:
            return unacceptable()
        if self is UserState.TERMINATED:
            return terminated()
        if self is UserState.ACTIVE:
            return active()
        if self is UserState.DORMANT:
            return dormant()
        if self is UserState.CREATED:
            return created()
        if self is UserState.SUSPENDED:
            return suspended()
        if self is UserState.BLOCKED:
            return blocked()
