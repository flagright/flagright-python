# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from .user_details import UserDetails
from .legal_document import LegalDocument
from .contact_details import ContactDetails
from .pep_status import PepStatus
from .tag import Tag
from .person_attachment import PersonAttachment
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Person(UniversalBaseModel):
    """
    Model for a generic individual - different from User model by not having userId field
    """

    user_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="userId")] = pydantic.Field(
        default=None
    )
    """
    Unique user ID for the person
    """

    general_details: typing_extensions.Annotated[UserDetails, FieldMetadata(alias="generalDetails")]
    legal_documents: typing_extensions.Annotated[
        typing.Optional[typing.List[LegalDocument]], FieldMetadata(alias="legalDocuments")
    ] = pydantic.Field(default=None)
    """
    User's legal identity documents - See Document Model for details
    """

    contact_details: typing_extensions.Annotated[
        typing.Optional[ContactDetails], FieldMetadata(alias="contactDetails")
    ] = None
    pep_status: typing_extensions.Annotated[
        typing.Optional[typing.List[PepStatus]], FieldMetadata(alias="pepStatus")
    ] = None
    tags: typing.Optional[typing.List[Tag]] = pydantic.Field(default=None)
    """
    Additional information that can be added via tags
    """

    attachments: typing.Optional[typing.List[PersonAttachment]] = pydantic.Field(default=None)
    """
    User's attachments uploaded by business user
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
