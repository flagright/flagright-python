# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from .company_general_details import CompanyGeneralDetails
from ..core.serialization import FieldMetadata
import typing
from .company_financial_details import CompanyFinancialDetails
from .company_registration_details import CompanyRegistrationDetails
from .source_of_funds import SourceOfFunds
from .contact_details import ContactDetails
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class LegalEntity(UniversalBaseModel):
    """
    Model for business user legal entity details
    """

    company_general_details: typing_extensions.Annotated[
        CompanyGeneralDetails, FieldMetadata(alias="companyGeneralDetails")
    ]
    company_financial_details: typing_extensions.Annotated[
        typing.Optional[CompanyFinancialDetails], FieldMetadata(alias="companyFinancialDetails")
    ] = None
    company_registration_details: typing_extensions.Annotated[
        typing.Optional[CompanyRegistrationDetails], FieldMetadata(alias="companyRegistrationDetails")
    ] = None
    reason_for_account_opening: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="reasonForAccountOpening")
    ] = None
    source_of_funds: typing_extensions.Annotated[
        typing.Optional[typing.List[SourceOfFunds]], FieldMetadata(alias="sourceOfFunds")
    ] = None
    contact_details: typing_extensions.Annotated[
        typing.Optional[ContactDetails], FieldMetadata(alias="contactDetails")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
