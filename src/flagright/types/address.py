# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from .tag import Tag
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Address(UniversalBaseModel):
    """
    Model for standardized address
    """

    address_lines: typing_extensions.Annotated[typing.List[str], FieldMetadata(alias="addressLines")] = pydantic.Field()
    """
    Address lines of the user's residence address
    """

    postcode: typing.Optional[str] = pydantic.Field(default=None)
    """
    Post code of the user's residence address
    """

    city: typing.Optional[str] = pydantic.Field(default=None)
    """
    City of the user's residence address
    """

    state: typing.Optional[str] = pydantic.Field(default=None)
    """
    State of the user's residence address
    """

    country: typing.Optional[str] = pydantic.Field(default=None)
    """
    User's country of residence
    """

    address_type: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="addressType")] = (
        pydantic.Field(default=None)
    )
    """
    Type of the address (ex - Residential, Postal, etc.)
    """

    tags: typing.Optional[typing.List[Tag]] = pydantic.Field(default=None)
    """
    Additional information that can be added via tags
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
