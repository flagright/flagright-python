# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
import typing
from .transaction_state import TransactionState
from .transaction_amount_details import TransactionAmountDetails
from .transaction_origin_payment_details import TransactionOriginPaymentDetails
from .transaction_destination_payment_details import TransactionDestinationPaymentDetails
from .origin_funds_info import OriginFundsInfo
from .device_data import DeviceData
from .tag import Tag
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Transaction(UniversalBaseModel):
    type: str = pydantic.Field()
    """
    Type of transaction (ex: DEPOSIT, WITHDRAWAL, TRANSFER, EXTERNAL_PAYMENT, REFUND, OTHER)
    """

    transaction_id: typing_extensions.Annotated[str, FieldMetadata(alias="transactionId")] = pydantic.Field()
    """
    Unique transaction identifier
    """

    timestamp: float = pydantic.Field()
    """
    Timestamp of when transaction took place
    """

    origin_user_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="originUserId")] = (
        pydantic.Field(default=None)
    )
    """
    UserId for where the transaction originates from
    """

    destination_user_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="destinationUserId")] = (
        pydantic.Field(default=None)
    )
    """
    UserId for transaction's destination. In other words, where the value is being transferred to.
    """

    transaction_state: typing_extensions.Annotated[
        typing.Optional[TransactionState], FieldMetadata(alias="transactionState")
    ] = None
    origin_amount_details: typing_extensions.Annotated[
        typing.Optional[TransactionAmountDetails], FieldMetadata(alias="originAmountDetails")
    ] = None
    destination_amount_details: typing_extensions.Annotated[
        typing.Optional[TransactionAmountDetails], FieldMetadata(alias="destinationAmountDetails")
    ] = None
    origin_payment_details: typing_extensions.Annotated[
        typing.Optional[TransactionOriginPaymentDetails], FieldMetadata(alias="originPaymentDetails")
    ] = pydantic.Field(default=None)
    """
    Payment details of the origin. It can be a bank account number, wallet ID, card fingerprint etc.
    """

    destination_payment_details: typing_extensions.Annotated[
        typing.Optional[TransactionDestinationPaymentDetails], FieldMetadata(alias="destinationPaymentDetails")
    ] = None
    origin_funds_info: typing_extensions.Annotated[
        typing.Optional[OriginFundsInfo], FieldMetadata(alias="originFundsInfo")
    ] = None
    related_transaction_ids: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="relatedTransactionIds")
    ] = pydantic.Field(default=None)
    """
    IDs of transactions related to this transaction. Ex: refund, split bills
    """

    product_type: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="productType")] = (
        pydantic.Field(default=None)
    )
    """
    Type of produce being used by the consumer (ex wallets, payments etc)
    """

    promotion_code_used: typing_extensions.Annotated[
        typing.Optional[bool], FieldMetadata(alias="promotionCodeUsed")
    ] = pydantic.Field(default=None)
    """
    Whether a promotion code was used or not the transaction
    """

    reference: typing.Optional[str] = pydantic.Field(default=None)
    """
    Reference field for the transaction indicating the purpose of the transaction etc.
    """

    origin_device_data: typing_extensions.Annotated[
        typing.Optional[DeviceData], FieldMetadata(alias="originDeviceData")
    ] = None
    destination_device_data: typing_extensions.Annotated[
        typing.Optional[DeviceData], FieldMetadata(alias="destinationDeviceData")
    ] = None
    tags: typing.Optional[typing.List[Tag]] = pydantic.Field(default=None)
    """
    Additional information that can be added via tags
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
