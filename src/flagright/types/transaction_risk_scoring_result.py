# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ..core.serialization import FieldMetadata
import pydantic
from .risk_level import RiskLevel
import typing
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class TransactionRiskScoringResult(UniversalBaseModel):
    trs_score: typing_extensions.Annotated[float, FieldMetadata(alias="trsScore")] = pydantic.Field()
    """
    Transaction risk scoring score
    """

    trs_risk_level: typing_extensions.Annotated[RiskLevel, FieldMetadata(alias="trsRiskLevel")]
    origin_user_cra_risk_score: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="originUserCraRiskScore")
    ] = pydantic.Field(default=None)
    """
    Origin user's CRA risk score
    """

    destination_user_cra_risk_score: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="destinationUserCraRiskScore")
    ] = pydantic.Field(default=None)
    """
    Destination user's CRA risk score
    """

    origin_user_cra_risk_level: typing_extensions.Annotated[
        typing.Optional[RiskLevel], FieldMetadata(alias="originUserCraRiskLevel")
    ] = None
    destination_user_cra_risk_level: typing_extensions.Annotated[
        typing.Optional[RiskLevel], FieldMetadata(alias="destinationUserCraRiskLevel")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
