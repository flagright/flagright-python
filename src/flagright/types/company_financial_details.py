# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .amount import Amount
from .tag import Tag


class CompanyFinancialDetails(pydantic.BaseModel):
    """
    Model for business user company financial details
    """

    expected_transaction_amount_per_month: typing.Optional[Amount] = pydantic.Field(
        alias="expectedTransactionAmountPerMonth"
    )
    expected_turnover_per_month: typing.Optional[Amount] = pydantic.Field(alias="expectedTurnoverPerMonth")
    tags: typing.Optional[typing.List[Tag]] = pydantic.Field(
        description="Additional information that can be added via tags"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
