# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from .case_management_event_case_status import CaseManagementEventCaseStatus
from ..core.serialization import FieldMetadata
import pydantic
from .case_management_event_case_status_reason import CaseManagementEventCaseStatusReason
import typing
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class CaseManagementEvent(UniversalBaseModel):
    """
    Model for case management events
    """

    case_status: typing_extensions.Annotated[CaseManagementEventCaseStatus, FieldMetadata(alias="caseStatus")] = (
        pydantic.Field()
    )
    """
    Status of a case. E.g. Open, Closed etc.
    """

    timestamp: float = pydantic.Field()
    """
    Timestamp of the event
    """

    case_status_reason: typing_extensions.Annotated[
        CaseManagementEventCaseStatusReason, FieldMetadata(alias="caseStatusReason")
    ] = pydantic.Field()
    """
    Case status reason. E.g. Closed & False Positive, Closed & Investigation Completed etc.
    """

    transaction_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="transactionId")] = (
        pydantic.Field(default=None)
    )
    """
    Transaction ID the case pertains to
    """

    user_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="userId")] = pydantic.Field(
        default=None
    )
    """
    User ID the case pertains to
    """

    event_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="eventId")] = pydantic.Field(
        default=None
    )
    """
    Event ID the case pertains to
    """

    case_status_reason_description: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="caseStatusReasonDescription")
    ] = pydantic.Field(default=None)
    """
    Case status reason description
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
