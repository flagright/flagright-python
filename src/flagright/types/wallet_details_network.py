# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class WalletDetailsNetwork(str, enum.Enum):
    """
    Network of the wallet
    """

    BITCOIN = "BITCOIN"
    ETHEREUM = "ETHEREUM"
    POLYGON = "POLYGON"
    BNB_SMART_CHAIN = "BNB_SMART_CHAIN"
    BNB_BEACON_CHAIN = "BNB_BEACON_CHAIN"
    ARBITRUM_L_2 = "ARBITRUM_L2"
    SOLANA = "SOLANA"
    AVALANCHE_C_CHAIN = "AVALANCHE_C_CHAIN"
    LITECOIN = "LITECOIN"
    BITCOIN_CASH = "BITCOIN_CASH"
    RIPPLE = "RIPPLE"
    STELLAR = "STELLAR"
    EOS_PUBLIC = "EOS_PUBLIC"
    TRON = "TRON"
    CARDANO = "CARDANO"
    POLKADOT = "POLKADOT"
    NEAR_PROTOCOL = "NEAR_PROTOCOL"
    COSMOS = "COSMOS"
    DOGECOIN = "DOGECOIN"
    OPTIMISM_MAINNET = "OPTIMISM_MAINNET"
    FANTOM = "FANTOM"
    HEDERA = "HEDERA"
    ALGORAND = "ALGORAND"
    CELESTIA = "CELESTIA"

    def visit(
        self,
        bitcoin: typing.Callable[[], T_Result],
        ethereum: typing.Callable[[], T_Result],
        polygon: typing.Callable[[], T_Result],
        bnb_smart_chain: typing.Callable[[], T_Result],
        bnb_beacon_chain: typing.Callable[[], T_Result],
        arbitrum_l_2: typing.Callable[[], T_Result],
        solana: typing.Callable[[], T_Result],
        avalanche_c_chain: typing.Callable[[], T_Result],
        litecoin: typing.Callable[[], T_Result],
        bitcoin_cash: typing.Callable[[], T_Result],
        ripple: typing.Callable[[], T_Result],
        stellar: typing.Callable[[], T_Result],
        eos_public: typing.Callable[[], T_Result],
        tron: typing.Callable[[], T_Result],
        cardano: typing.Callable[[], T_Result],
        polkadot: typing.Callable[[], T_Result],
        near_protocol: typing.Callable[[], T_Result],
        cosmos: typing.Callable[[], T_Result],
        dogecoin: typing.Callable[[], T_Result],
        optimism_mainnet: typing.Callable[[], T_Result],
        fantom: typing.Callable[[], T_Result],
        hedera: typing.Callable[[], T_Result],
        algorand: typing.Callable[[], T_Result],
        celestia: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is WalletDetailsNetwork.BITCOIN:
            return bitcoin()
        if self is WalletDetailsNetwork.ETHEREUM:
            return ethereum()
        if self is WalletDetailsNetwork.POLYGON:
            return polygon()
        if self is WalletDetailsNetwork.BNB_SMART_CHAIN:
            return bnb_smart_chain()
        if self is WalletDetailsNetwork.BNB_BEACON_CHAIN:
            return bnb_beacon_chain()
        if self is WalletDetailsNetwork.ARBITRUM_L_2:
            return arbitrum_l_2()
        if self is WalletDetailsNetwork.SOLANA:
            return solana()
        if self is WalletDetailsNetwork.AVALANCHE_C_CHAIN:
            return avalanche_c_chain()
        if self is WalletDetailsNetwork.LITECOIN:
            return litecoin()
        if self is WalletDetailsNetwork.BITCOIN_CASH:
            return bitcoin_cash()
        if self is WalletDetailsNetwork.RIPPLE:
            return ripple()
        if self is WalletDetailsNetwork.STELLAR:
            return stellar()
        if self is WalletDetailsNetwork.EOS_PUBLIC:
            return eos_public()
        if self is WalletDetailsNetwork.TRON:
            return tron()
        if self is WalletDetailsNetwork.CARDANO:
            return cardano()
        if self is WalletDetailsNetwork.POLKADOT:
            return polkadot()
        if self is WalletDetailsNetwork.NEAR_PROTOCOL:
            return near_protocol()
        if self is WalletDetailsNetwork.COSMOS:
            return cosmos()
        if self is WalletDetailsNetwork.DOGECOIN:
            return dogecoin()
        if self is WalletDetailsNetwork.OPTIMISM_MAINNET:
            return optimism_mainnet()
        if self is WalletDetailsNetwork.FANTOM:
            return fantom()
        if self is WalletDetailsNetwork.HEDERA:
            return hedera()
        if self is WalletDetailsNetwork.ALGORAND:
            return algorand()
        if self is WalletDetailsNetwork.CELESTIA:
            return celestia()
