# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ..core.serialization import FieldMetadata
import pydantic
from .legal_entity import LegalEntity
import typing
from .user_state_details import UserStateDetails
from .kyc_status_details import KycStatusDetails
from .person import Person
from .transaction_limits import TransactionLimits
from .risk_level import RiskLevel
from .payment_method import PaymentMethod
from .user_entity_link import UserEntityLink
from .acquisition_channel import AcquisitionChannel
from .business_saved_payment_details_item import BusinessSavedPaymentDetailsItem
from .mcc_details import MccDetails
from .user_tag import UserTag
from .person_attachment import PersonAttachment
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class Business(UniversalBaseModel):
    user_id: typing_extensions.Annotated[str, FieldMetadata(alias="userId")] = pydantic.Field()
    """
    Unique user ID for the user
    """

    created_timestamp: typing_extensions.Annotated[float, FieldMetadata(alias="createdTimestamp")] = pydantic.Field()
    """
    Timestamp when the user was created
    """

    legal_entity: typing_extensions.Annotated[LegalEntity, FieldMetadata(alias="legalEntity")]
    activated_timestamp: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="activatedTimestamp")
    ] = pydantic.Field(default=None)
    """
    Timestamp when the user was activated
    """

    user_state_details: typing_extensions.Annotated[
        typing.Optional[UserStateDetails], FieldMetadata(alias="userStateDetails")
    ] = None
    kyc_status_details: typing_extensions.Annotated[
        typing.Optional[KycStatusDetails], FieldMetadata(alias="kycStatusDetails")
    ] = None
    share_holders: typing_extensions.Annotated[
        typing.Optional[typing.List[Person]], FieldMetadata(alias="shareHolders")
    ] = pydantic.Field(default=None)
    """
    Shareholders (beneficiaries) of the company that hold at least 25% ownership. Can be another company or an individual
    """

    directors: typing.Optional[typing.List[Person]] = pydantic.Field(default=None)
    """
    Director(s) of the company. Must be at least one
    """

    transaction_limits: typing_extensions.Annotated[
        typing.Optional[TransactionLimits], FieldMetadata(alias="transactionLimits")
    ] = None
    risk_level: typing_extensions.Annotated[typing.Optional[RiskLevel], FieldMetadata(alias="riskLevel")] = None
    kyc_risk_level: typing_extensions.Annotated[typing.Optional[RiskLevel], FieldMetadata(alias="kycRiskLevel")] = None
    allowed_payment_methods: typing_extensions.Annotated[
        typing.Optional[typing.List[PaymentMethod]], FieldMetadata(alias="allowedPaymentMethods")
    ] = None
    last_transaction_timestamp: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="lastTransactionTimestamp")
    ] = pydantic.Field(default=None)
    """
    Timestamp of the last successful transaction of the user
    """

    linked_entities: typing_extensions.Annotated[
        typing.Optional[UserEntityLink], FieldMetadata(alias="linkedEntities")
    ] = None
    acquisition_channel: typing_extensions.Annotated[
        typing.Optional[AcquisitionChannel], FieldMetadata(alias="acquisitionChannel")
    ] = None
    saved_payment_details: typing_extensions.Annotated[
        typing.Optional[typing.List[BusinessSavedPaymentDetailsItem]], FieldMetadata(alias="savedPaymentDetails")
    ] = None
    mcc_details: typing_extensions.Annotated[typing.Optional[MccDetails], FieldMetadata(alias="mccDetails")] = None
    tags: typing.Optional[typing.List[UserTag]] = pydantic.Field(default=None)
    """
    Additional information that can be added via tags
    """

    attachments: typing.Optional[typing.List[PersonAttachment]] = pydantic.Field(default=None)
    """
    User's attachments uploaded by business user
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
