# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
from .check_delivery_status import CheckDeliveryStatus
from .address import Address
from .tag import Tag
import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class CheckDetails(UniversalBaseModel):
    check_number: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="checkNumber")] = None
    check_identifier: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="checkIdentifier")] = None
    name: typing.Optional[str] = None
    delivery_status: typing_extensions.Annotated[
        typing.Optional[CheckDeliveryStatus], FieldMetadata(alias="deliveryStatus")
    ] = None
    eta_timestamp: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="etaTimestamp")] = None
    shipping_address: typing_extensions.Annotated[typing.Optional[Address], FieldMetadata(alias="shippingAddress")] = (
        None
    )
    tags: typing.Optional[typing.List[Tag]] = pydantic.Field(default=None)
    """
    Additional information that can be added via tags
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
