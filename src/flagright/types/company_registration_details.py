# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from ..core.serialization import FieldMetadata
import pydantic
from .country_code import CountryCode
import typing
from .tag import Tag
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class CompanyRegistrationDetails(UniversalBaseModel):
    """
    Model for business user company registration details
    """

    registration_identifier: typing_extensions.Annotated[str, FieldMetadata(alias="registrationIdentifier")] = (
        pydantic.Field()
    )
    """
    Commercial registry registration number for the company in its registration country
    """

    registration_country: typing_extensions.Annotated[CountryCode, FieldMetadata(alias="registrationCountry")]
    tax_residence_country: typing_extensions.Annotated[
        typing.Optional[CountryCode], FieldMetadata(alias="taxResidenceCountry")
    ] = None
    tax_identifier: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="taxIdentifier")] = (
        pydantic.Field(default=None)
    )
    """
    Tax ID number of the registered entity
    """

    legal_entity_type: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="legalEntityType")] = (
        pydantic.Field(default=None)
    )
    """
    Type of legal entity, e.g., Limited Liability
    """

    date_of_registration: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="dateOfRegistration")
    ] = None
    tags: typing.Optional[typing.List[Tag]] = pydantic.Field(default=None)
    """
    Additional information that can be added via tags
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
