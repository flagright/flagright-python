# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class RiskScoringResult(pydantic.BaseModel):
    """
    Model for results from Risk Scoring
    """

    kyc_risk_score: float = pydantic.Field(alias="kycRiskScore", description=("Quantified KYC risk score\n"))
    transaction_risk_score: float = pydantic.Field(
        alias="transactionRiskScore", description=("Quantified action risk score\n")
    )
    customer_risk_assessment: typing.Optional[float] = pydantic.Field(
        alias="customerRiskAssessment", description=("Quantified dynamic risk score\n")
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
