# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .batch_response_failed_record import BatchResponseFailedRecord
from .batch_response_status import BatchResponseStatus


class BatchResponse(UniversalBaseModel):
    """
    Response from creation of a batch
    """

    status: BatchResponseStatus
    batch_id: typing_extensions.Annotated[str, FieldMetadata(alias="batchId")]
    successful: float
    failed: float
    failed_records: typing_extensions.Annotated[
        typing.Optional[typing.List[BatchResponseFailedRecord]], FieldMetadata(alias="failedRecords")
    ] = None
    message: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
