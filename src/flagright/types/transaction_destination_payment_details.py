# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations
from ..core.pydantic_utilities import UniversalBaseModel
import typing
import typing_extensions
from ..core.serialization import FieldMetadata
from .email_id import EmailId
from .card_status import CardStatus
from .country_code import CountryCode
from .consumer_name import ConsumerName
from .card_expiry import CardExpiry
from .pos_details import PosDetails
from .card_brand import CardBrand
from .card_funding import CardFunding
from .card_type import CardType
from .amount import Amount
from .card_merchant_details import CardMerchantDetails
from .tag import Tag
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic
from .address import Address
from .wallet_network import WalletNetwork
from .mpesa_transaction_type import MpesaTransactionType
from .check_delivery_status import CheckDeliveryStatus


class TransactionDestinationPaymentDetails_Card(UniversalBaseModel):
    method: typing.Literal["CARD"] = "CARD"
    card_fingerprint: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="cardFingerprint")] = None
    email_id: typing_extensions.Annotated[typing.Optional[EmailId], FieldMetadata(alias="emailId")] = None
    card_status: typing_extensions.Annotated[typing.Optional[CardStatus], FieldMetadata(alias="cardStatus")] = None
    card_issued_country: typing_extensions.Annotated[
        typing.Optional[CountryCode], FieldMetadata(alias="cardIssuedCountry")
    ] = None
    transaction_reference_field: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="transactionReferenceField")
    ] = None
    f_3_ds_done: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="3dsDone")] = None
    name_on_card: typing_extensions.Annotated[typing.Optional[ConsumerName], FieldMetadata(alias="nameOnCard")] = None
    card_expiry: typing_extensions.Annotated[typing.Optional[CardExpiry], FieldMetadata(alias="cardExpiry")] = None
    pos_details: typing_extensions.Annotated[typing.Optional[PosDetails], FieldMetadata(alias="posDetails")] = None
    card_last_4_digits: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="cardLast4Digits")] = None
    card_brand: typing_extensions.Annotated[typing.Optional[CardBrand], FieldMetadata(alias="cardBrand")] = None
    card_funding: typing_extensions.Annotated[typing.Optional[CardFunding], FieldMetadata(alias="cardFunding")] = None
    card_authenticated: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="cardAuthenticated")] = (
        None
    )
    card_tokenized: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="cardTokenized")] = None
    card_present: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="cardPresent")] = None
    payment_channel: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="paymentChannel")] = None
    card_type: typing_extensions.Annotated[typing.Optional[CardType], FieldMetadata(alias="cardType")] = None
    card_balance: typing_extensions.Annotated[typing.Optional[Amount], FieldMetadata(alias="cardBalance")] = None
    merchant_details: typing_extensions.Annotated[
        typing.Optional[CardMerchantDetails], FieldMetadata(alias="merchantDetails")
    ] = None
    network_provider_risk_score: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="networkProviderRiskScore")
    ] = None
    tags: typing.Optional[typing.List[Tag]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class TransactionDestinationPaymentDetails_GenericBankAccount(UniversalBaseModel):
    method: typing.Literal["GENERIC_BANK_ACCOUNT"] = "GENERIC_BANK_ACCOUNT"
    account_number: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="accountNumber")] = None
    account_type: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="accountType")] = None
    account_balance: typing_extensions.Annotated[typing.Optional[Amount], FieldMetadata(alias="accountBalance")] = None
    bank_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="bankName")] = None
    bank_code: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="bankCode")] = None
    country: typing.Optional[CountryCode] = None
    name: typing.Optional[str] = None
    bank_address: typing_extensions.Annotated[typing.Optional[Address], FieldMetadata(alias="bankAddress")] = None
    email_id: typing_extensions.Annotated[typing.Optional[EmailId], FieldMetadata(alias="emailId")] = None
    special_instructions: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="specialInstructions")
    ] = None
    payment_channel: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="paymentChannel")] = None
    tags: typing.Optional[typing.List[Tag]] = None
    transit_number: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="transitNumber")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class TransactionDestinationPaymentDetails_Iban(UniversalBaseModel):
    method: typing.Literal["IBAN"] = "IBAN"
    bic: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="BIC")] = None
    bank_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="bankName")] = None
    bank_address: typing_extensions.Annotated[typing.Optional[Address], FieldMetadata(alias="bankAddress")] = None
    country: typing.Optional[CountryCode] = None
    iban: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="IBAN")] = None
    account_balance: typing_extensions.Annotated[typing.Optional[Amount], FieldMetadata(alias="accountBalance")] = None
    name: typing.Optional[str] = None
    email_id: typing_extensions.Annotated[typing.Optional[EmailId], FieldMetadata(alias="emailId")] = None
    bank_branch_code: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="bankBranchCode")] = None
    payment_channel: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="paymentChannel")] = None
    tags: typing.Optional[typing.List[Tag]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class TransactionDestinationPaymentDetails_Ach(UniversalBaseModel):
    method: typing.Literal["ACH"] = "ACH"
    routing_number: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="routingNumber")] = None
    account_number: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="accountNumber")] = None
    account_balance: typing_extensions.Annotated[typing.Optional[Amount], FieldMetadata(alias="accountBalance")] = None
    bank_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="bankName")] = None
    name: typing.Optional[str] = None
    bank_address: typing_extensions.Annotated[typing.Optional[Address], FieldMetadata(alias="bankAddress")] = None
    beneficiary_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="beneficiaryName")] = None
    email_id: typing_extensions.Annotated[typing.Optional[EmailId], FieldMetadata(alias="emailId")] = None
    tags: typing.Optional[typing.List[Tag]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class TransactionDestinationPaymentDetails_Upi(UniversalBaseModel):
    method: typing.Literal["UPI"] = "UPI"
    upi_id: typing_extensions.Annotated[str, FieldMetadata(alias="upiID")]
    bank_provider: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="bankProvider")] = None
    interface_provider: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="interfaceProvider")] = (
        None
    )
    name: typing.Optional[str] = None
    email_id: typing_extensions.Annotated[typing.Optional[EmailId], FieldMetadata(alias="emailId")] = None
    tags: typing.Optional[typing.List[Tag]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class TransactionDestinationPaymentDetails_Wallet(UniversalBaseModel):
    method: typing.Literal["WALLET"] = "WALLET"
    wallet_type: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="walletType")] = None
    wallet_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="walletId")] = None
    payment_channel: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="paymentChannel")] = None
    name: typing.Optional[str] = None
    email_id: typing_extensions.Annotated[typing.Optional[EmailId], FieldMetadata(alias="emailId")] = None
    tags: typing.Optional[typing.List[Tag]] = None
    wallet_phone_number: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="walletPhoneNumber")] = (
        None
    )
    wallet_balance: typing_extensions.Annotated[typing.Optional[Amount], FieldMetadata(alias="walletBalance")] = None
    network: typing.Optional[WalletNetwork] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class TransactionDestinationPaymentDetails_Swift(UniversalBaseModel):
    method: typing.Literal["SWIFT"] = "SWIFT"
    swift_code: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="swiftCode")] = None
    account_number: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="accountNumber")] = None
    account_balance: typing_extensions.Annotated[typing.Optional[Amount], FieldMetadata(alias="accountBalance")] = None
    account_type: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="accountType")] = None
    bank_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="bankName")] = None
    name: typing.Optional[str] = None
    bank_address: typing_extensions.Annotated[typing.Optional[Address], FieldMetadata(alias="bankAddress")] = None
    email_id: typing_extensions.Annotated[typing.Optional[EmailId], FieldMetadata(alias="emailId")] = None
    special_instructions: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="specialInstructions")
    ] = None
    tags: typing.Optional[typing.List[Tag]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class TransactionDestinationPaymentDetails_Mpesa(UniversalBaseModel):
    method: typing.Literal["MPESA"] = "MPESA"
    business_short_code: typing_extensions.Annotated[str, FieldMetadata(alias="businessShortCode")]
    transaction_type: typing_extensions.Annotated[MpesaTransactionType, FieldMetadata(alias="transactionType")]
    phone_number: typing_extensions.Annotated[str, FieldMetadata(alias="phoneNumber")]
    email_id: typing_extensions.Annotated[typing.Optional[EmailId], FieldMetadata(alias="emailId")] = None
    tags: typing.Optional[typing.List[Tag]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class TransactionDestinationPaymentDetails_Check(UniversalBaseModel):
    method: typing.Literal["CHECK"] = "CHECK"
    check_number: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="checkNumber")] = None
    check_identifier: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="checkIdentifier")] = None
    name: typing.Optional[str] = None
    delivery_status: typing_extensions.Annotated[
        typing.Optional[CheckDeliveryStatus], FieldMetadata(alias="deliveryStatus")
    ] = None
    eta_timestamp: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="etaTimestamp")] = None
    shipping_address: typing_extensions.Annotated[typing.Optional[Address], FieldMetadata(alias="shippingAddress")] = (
        None
    )
    tags: typing.Optional[typing.List[Tag]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class TransactionDestinationPaymentDetails_Cash(UniversalBaseModel):
    method: typing.Literal["CASH"] = "CASH"
    identifier: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


TransactionDestinationPaymentDetails = typing.Union[
    TransactionDestinationPaymentDetails_Card,
    TransactionDestinationPaymentDetails_GenericBankAccount,
    TransactionDestinationPaymentDetails_Iban,
    TransactionDestinationPaymentDetails_Ach,
    TransactionDestinationPaymentDetails_Upi,
    TransactionDestinationPaymentDetails_Wallet,
    TransactionDestinationPaymentDetails_Swift,
    TransactionDestinationPaymentDetails_Mpesa,
    TransactionDestinationPaymentDetails_Check,
    TransactionDestinationPaymentDetails_Cash,
]
