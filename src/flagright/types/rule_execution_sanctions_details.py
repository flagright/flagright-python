# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .rule_hit_direction import RuleHitDirection
from .sanctions_details_entity_type import SanctionsDetailsEntityType
from .sanctions_hit_context import SanctionsHitContext


class RuleExecutionSanctionsDetails(UniversalBaseModel):
    name: str
    search_id: typing_extensions.Annotated[str, FieldMetadata(alias="searchId")]
    iban: typing.Optional[str] = None
    entity_type: typing_extensions.Annotated[
        typing.Optional[SanctionsDetailsEntityType], FieldMetadata(alias="entityType")
    ] = None
    sanction_hit_ids: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="sanctionHitIds")
    ] = None
    hit_context: typing_extensions.Annotated[
        typing.Optional[SanctionsHitContext], FieldMetadata(alias="hitContext")
    ] = None
    hit_direction: typing_extensions.Annotated[
        typing.Optional[RuleHitDirection], FieldMetadata(alias="hitDirection")
    ] = None
    is_rule_hit: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isRuleHit")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
