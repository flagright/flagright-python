# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from .user_details import UserDetails
from .user_state_details import UserStateDetails
from .kyc_status_details import KycStatusDetails
from .employment_status import EmploymentStatus
from .legal_document import LegalDocument
from .contact_details import ContactDetails
from .employment_details import EmploymentDetails
from .transaction_limits import TransactionLimits
from .expected_income import ExpectedIncome
from .risk_level import RiskLevel
from .acquisition_channel import AcquisitionChannel
from .source_of_funds import SourceOfFunds
from .consumer_user_segment import ConsumerUserSegment
from .pep_status import PepStatus
from .user_entity_link import UserEntityLink
from .user_optional_saved_payment_details_item import UserOptionalSavedPaymentDetailsItem
from .user_tag import UserTag
from .person_attachment import PersonAttachment
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class UserOptional(UniversalBaseModel):
    """
    Model for User details
    """

    activated_timestamp: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="activatedTimestamp")
    ] = pydantic.Field(default=None)
    """
    Timestamp when user was activated
    """

    user_details: typing_extensions.Annotated[typing.Optional[UserDetails], FieldMetadata(alias="userDetails")] = None
    user_state_details: typing_extensions.Annotated[
        typing.Optional[UserStateDetails], FieldMetadata(alias="userStateDetails")
    ] = None
    kyc_status_details: typing_extensions.Annotated[
        typing.Optional[KycStatusDetails], FieldMetadata(alias="kycStatusDetails")
    ] = None
    eodd_date: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="eoddDate")] = None
    employment_status: typing_extensions.Annotated[
        typing.Optional[EmploymentStatus], FieldMetadata(alias="employmentStatus")
    ] = None
    occupation: typing.Optional[str] = None
    legal_documents: typing_extensions.Annotated[
        typing.Optional[typing.List[LegalDocument]], FieldMetadata(alias="legalDocuments")
    ] = pydantic.Field(default=None)
    """
    User's legal identity documents - See Document Model for details
    """

    contact_details: typing_extensions.Annotated[
        typing.Optional[ContactDetails], FieldMetadata(alias="contactDetails")
    ] = None
    employment_details: typing_extensions.Annotated[
        typing.Optional[EmploymentDetails], FieldMetadata(alias="employmentDetails")
    ] = None
    transaction_limits: typing_extensions.Annotated[
        typing.Optional[TransactionLimits], FieldMetadata(alias="transactionLimits")
    ] = None
    expected_income: typing_extensions.Annotated[
        typing.Optional[ExpectedIncome], FieldMetadata(alias="expectedIncome")
    ] = None
    risk_level: typing_extensions.Annotated[typing.Optional[RiskLevel], FieldMetadata(alias="riskLevel")] = None
    kyc_risk_level: typing_extensions.Annotated[typing.Optional[RiskLevel], FieldMetadata(alias="kycRiskLevel")] = None
    acquisition_channel: typing_extensions.Annotated[
        typing.Optional[AcquisitionChannel], FieldMetadata(alias="acquisitionChannel")
    ] = None
    reason_for_account_opening: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="reasonForAccountOpening")
    ] = None
    source_of_funds: typing_extensions.Annotated[
        typing.Optional[typing.List[SourceOfFunds]], FieldMetadata(alias="sourceOfFunds")
    ] = None
    user_segment: typing_extensions.Annotated[
        typing.Optional[ConsumerUserSegment], FieldMetadata(alias="userSegment")
    ] = None
    pep_status: typing_extensions.Annotated[
        typing.Optional[typing.List[PepStatus]], FieldMetadata(alias="pepStatus")
    ] = None
    last_transaction_timestamp: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="lastTransactionTimestamp")
    ] = pydantic.Field(default=None)
    """
    Timestamp of the last successful transaction of the user
    """

    linked_entities: typing_extensions.Annotated[
        typing.Optional[UserEntityLink], FieldMetadata(alias="linkedEntities")
    ] = None
    saved_payment_details: typing_extensions.Annotated[
        typing.Optional[typing.List[UserOptionalSavedPaymentDetailsItem]], FieldMetadata(alias="savedPaymentDetails")
    ] = None
    tags: typing.Optional[typing.List[UserTag]] = pydantic.Field(default=None)
    """
    Additional information that can be added via tags
    """

    attachments: typing.Optional[typing.List[PersonAttachment]] = pydantic.Field(default=None)
    """
    Uploaded user's attachment
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
