# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from .country_code import CountryCode
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class DeviceData(UniversalBaseModel):
    """
    Model for device data
    """

    battery_level: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="batteryLevel")] = (
        pydantic.Field(default=None)
    )
    """
    Battery level of the device used for a transaction or event at a given timestamp
    """

    device_latitude: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="deviceLatitude")] = (
        pydantic.Field(default=None)
    )
    """
    Device latitude at a give timestamp for an event or transaction
    """

    device_longitude: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="deviceLongitude")] = (
        pydantic.Field(default=None)
    )
    """
    Device longitude at a give timestamp for an event or transaction
    """

    ip_address: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="ipAddress")] = pydantic.Field(
        default=None
    )
    """
    IP address of the device at a given timestamp for an event or transaction
    """

    ip_country: typing_extensions.Annotated[typing.Optional[CountryCode], FieldMetadata(alias="ipCountry")] = None
    device_identifier: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="deviceIdentifier")] = (
        pydantic.Field(default=None)
    )
    """
    Device identifier number
    """

    vpn_used: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="vpnUsed")] = pydantic.Field(
        default=None
    )
    """
    Whether VPN was used at a given timestamp for an event or transaction
    """

    operating_system: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="operatingSystem")] = (
        pydantic.Field(default=None)
    )
    """
    Operating system of the device at a given timestamp for an event or transaction
    """

    device_maker: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="deviceMaker")] = (
        pydantic.Field(default=None)
    )
    """
    The maker of the device at a given timestamp for an event or transaction
    """

    device_model: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="deviceModel")] = (
        pydantic.Field(default=None)
    )
    """
    The model of the device at a given timestamp for an event or transaction
    """

    device_year: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="deviceYear")] = pydantic.Field(
        default=None
    )
    """
    The year the device was manufactured at a given timestamp for an event or transaction
    """

    app_version: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="appVersion")] = pydantic.Field(
        default=None
    )
    """
    The version of the app your user is using on their device at a given timestamp for an event or transaction
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
