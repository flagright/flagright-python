# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class CaseManagementEventCaseStatusReason(str, enum.Enum):
    """
    Case status reason. E.g. Closed & False Positive, Closed & Investigation Completed etc.
    """

    FALSE_POSITIVE = "FALSE_POSITIVE"
    INVESTIGATION_COMPLETED = "INVESTIGATION_COMPLETED"
    DOCUMENTS_COLLECTED = "DOCUMENTS_COLLECTED"
    OTHER = "OTHER"

    def visit(
        self,
        false_positive: typing.Callable[[], T_Result],
        investigation_completed: typing.Callable[[], T_Result],
        documents_collected: typing.Callable[[], T_Result],
        other: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is CaseManagementEventCaseStatusReason.FALSE_POSITIVE:
            return false_positive()
        if self is CaseManagementEventCaseStatusReason.INVESTIGATION_COMPLETED:
            return investigation_completed()
        if self is CaseManagementEventCaseStatusReason.DOCUMENTS_COLLECTED:
            return documents_collected()
        if self is CaseManagementEventCaseStatusReason.OTHER:
            return other()
