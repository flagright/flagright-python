# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from .rule_action import RuleAction
from .rule_hit_meta import RuleHitMeta
from .rule_labels import RuleLabels
from .rule_nature import RuleNature
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class HitRulesDetails(UniversalBaseModel):
    """
    Model for list of hit rules
    """

    rule_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="ruleId")] = pydantic.Field(
        default=None
    )
    """
    Unique rule identifier
    """

    rule_instance_id: typing_extensions.Annotated[str, FieldMetadata(alias="ruleInstanceId")]
    rule_name: typing_extensions.Annotated[str, FieldMetadata(alias="ruleName")] = pydantic.Field()
    """
    Name of the rule
    """

    rule_description: typing_extensions.Annotated[str, FieldMetadata(alias="ruleDescription")] = pydantic.Field()
    """
    Description of the rule
    """

    executed_at: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="executedAt")] = (
        pydantic.Field(default=None)
    )
    """
    Timestamp when the rule was hit
    """

    rule_action: typing_extensions.Annotated[RuleAction, FieldMetadata(alias="ruleAction")]
    rule_hit_meta: typing_extensions.Annotated[typing.Optional[RuleHitMeta], FieldMetadata(alias="ruleHitMeta")] = None
    labels: typing.Optional[typing.List[RuleLabels]] = None
    nature: typing.Optional[RuleNature] = None
    is_shadow: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isShadow")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
