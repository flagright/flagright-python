# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .address import Address
from .consumer_name import ConsumerName
from .tag import Tag


class ContactDetails(UniversalBaseModel):
    """
    Model for business user contact information details
    """

    email_ids: typing_extensions.Annotated[typing.Optional[typing.List[str]], FieldMetadata(alias="emailIds")] = (
        pydantic.Field(default=None)
    )
    """
    Email addresses of the contacts for a given business customer
    """

    contact_numbers: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="contactNumbers")
    ] = pydantic.Field(default=None)
    """
    Phone numbers to contact a given business customer
    """

    fax_numbers: typing_extensions.Annotated[typing.Optional[typing.List[str]], FieldMetadata(alias="faxNumbers")] = (
        pydantic.Field(default=None)
    )
    """
    Fax numbers to contact a business customer
    """

    websites: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    Website of the company
    """

    addresses: typing.Optional[typing.List[Address]] = pydantic.Field(default=None)
    """
    Address(es) of the company
    """

    name: typing.Optional[ConsumerName] = None
    tags: typing.Optional[typing.List[Tag]] = pydantic.Field(default=None)
    """
    Additional information that can be added via tags
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
