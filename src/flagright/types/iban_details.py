# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from .address import Address
from .country_code import CountryCode
from .amount import Amount
from .email_id import EmailId
from .tag import Tag
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class IbanDetails(UniversalBaseModel):
    """
    Standardized model for Bank Details
    """

    bic: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="BIC")] = pydantic.Field(default=None)
    """
    Identifier for the bank. Can be routing number, BIK number, SWIFT code, BIC number etc.
    """

    bank_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="bankName")] = pydantic.Field(
        default=None
    )
    """
    Name of the bank
    """

    bank_address: typing_extensions.Annotated[typing.Optional[Address], FieldMetadata(alias="bankAddress")] = None
    country: typing.Optional[CountryCode] = None
    iban: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="IBAN")] = pydantic.Field(default=None)
    """
    Account number of the user. Can be account number, IBAN number etc.
    """

    account_balance: typing_extensions.Annotated[typing.Optional[Amount], FieldMetadata(alias="accountBalance")] = None
    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Name of the bank account holder
    """

    email_id: typing_extensions.Annotated[typing.Optional[EmailId], FieldMetadata(alias="emailId")] = None
    bank_branch_code: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="bankBranchCode")] = (
        pydantic.Field(default=None)
    )
    """
    Branch code of the bank. In some countries, this can be the same as the bank's SWIFT code
    """

    payment_channel: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="paymentChannel")] = None
    tags: typing.Optional[typing.List[Tag]] = pydantic.Field(default=None)
    """
    Additional information that can be added via tags
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
