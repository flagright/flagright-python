# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from .amount import Amount
from ..core.serialization import FieldMetadata
from .transaction_limits_payment_method_limits import TransactionLimitsPaymentMethodLimits
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class TransactionLimits(UniversalBaseModel):
    """
    Model for transaction limits for a given user
    """

    maximum_daily_transaction_limit: typing_extensions.Annotated[
        typing.Optional[Amount], FieldMetadata(alias="maximumDailyTransactionLimit")
    ] = None
    maximum_weekly_transaction_limit: typing_extensions.Annotated[
        typing.Optional[Amount], FieldMetadata(alias="maximumWeeklyTransactionLimit")
    ] = None
    maximum_monthly_transaction_limit: typing_extensions.Annotated[
        typing.Optional[Amount], FieldMetadata(alias="maximumMonthlyTransactionLimit")
    ] = None
    maximum_quarterly_transaction_limit: typing_extensions.Annotated[
        typing.Optional[Amount], FieldMetadata(alias="maximumQuarterlyTransactionLimit")
    ] = None
    maximum_transaction_limit: typing_extensions.Annotated[
        typing.Optional[Amount], FieldMetadata(alias="maximumTransactionLimit")
    ] = None
    maximum_yearly_transaction_limit: typing_extensions.Annotated[
        typing.Optional[Amount], FieldMetadata(alias="maximumYearlyTransactionLimit")
    ] = None
    payment_method_limits: typing_extensions.Annotated[
        typing.Optional[TransactionLimitsPaymentMethodLimits], FieldMetadata(alias="paymentMethodLimits")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
