# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
import typing
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class TransactionBase(UniversalBaseModel):
    """
    Model for transaction base Payload
    """

    type: str = pydantic.Field()
    """
    Type of transaction (ex: DEPOSIT, WITHDRAWAL, TRANSFER, EXTERNAL_PAYMENT, REFUND, OTHER)
    """

    transaction_id: typing_extensions.Annotated[str, FieldMetadata(alias="transactionId")] = pydantic.Field()
    """
    Unique transaction identifier
    """

    timestamp: float = pydantic.Field()
    """
    Timestamp of when transaction took place
    """

    origin_user_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="originUserId")] = (
        pydantic.Field(default=None)
    )
    """
    UserId for where the transaction originates from
    """

    destination_user_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="destinationUserId")] = (
        pydantic.Field(default=None)
    )
    """
    UserId for transaction's destination. In other words, where the value is being transferred to.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
