# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class ConsumerName(pydantic.BaseModel):
    """
    Model for a generic consumer name
    """

    first_name: str = pydantic.Field(
        alias="firstName", description='First name of the user <span style="white-space: nowrap">`non-empty`</span> '
    )
    middle_name: typing.Optional[str] = pydantic.Field(
        alias="middleName", description='Middle name of the user <span style="white-space: nowrap">`non-empty`</span> '
    )
    last_name: typing.Optional[str] = pydantic.Field(
        alias="lastName", description='Last name of the user <span style="white-space: nowrap">`non-empty`</span> '
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
