# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from .amount import Amount
from .address import Address
from .email_id import EmailId
from .tag import Tag
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class SwiftDetails(UniversalBaseModel):
    """
    Model for SWIFT payment method
    """

    swift_code: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="swiftCode")] = pydantic.Field(
        default=None
    )
    """
    SWIFT code of the financial institution
    """

    account_number: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="accountNumber")] = (
        pydantic.Field(default=None)
    )
    """
    Account number
    """

    account_balance: typing_extensions.Annotated[typing.Optional[Amount], FieldMetadata(alias="accountBalance")] = None
    account_type: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="accountType")] = (
        pydantic.Field(default=None)
    )
    """
    Account type. E.g. Checking, Savings etc.
    """

    bank_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="bankName")] = pydantic.Field(
        default=None
    )
    """
    Name of the bank
    """

    name: typing.Optional[str] = pydantic.Field(default=None)
    """
    Name of the account holder
    """

    bank_address: typing_extensions.Annotated[typing.Optional[Address], FieldMetadata(alias="bankAddress")] = None
    email_id: typing_extensions.Annotated[typing.Optional[EmailId], FieldMetadata(alias="emailId")] = None
    special_instructions: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="specialInstructions")
    ] = pydantic.Field(default=None)
    """
    Special instructions if any
    """

    tags: typing.Optional[typing.List[Tag]] = pydantic.Field(default=None)
    """
    Additional information that can be added via tags
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
