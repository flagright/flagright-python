# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from .amount import Amount
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class ExpectedIncome(UniversalBaseModel):
    """
    Model for expected income details
    """

    daily_expected_income: typing_extensions.Annotated[
        typing.Optional[Amount], FieldMetadata(alias="dailyExpectedIncome")
    ] = None
    weekly_expected_income: typing_extensions.Annotated[
        typing.Optional[Amount], FieldMetadata(alias="weeklyExpectedIncome")
    ] = None
    monthly_expected_income: typing_extensions.Annotated[
        typing.Optional[Amount], FieldMetadata(alias="monthlyExpectedIncome")
    ] = None
    quarterly_expected_income: typing_extensions.Annotated[
        typing.Optional[Amount], FieldMetadata(alias="quarterlyExpectedIncome")
    ] = None
    yearly_expected_income: typing_extensions.Annotated[
        typing.Optional[Amount], FieldMetadata(alias="yearlyExpectedIncome")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
