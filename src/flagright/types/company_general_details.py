# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from .business_user_segment import BusinessUserSegment
from .user_registration_status import UserRegistrationStatus
from .country_code import CountryCode
from .tag import Tag
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class CompanyGeneralDetails(UniversalBaseModel):
    """
    Model for business user company general details
    """

    legal_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="legalName")] = pydantic.Field(
        default=None
    )
    """
    Legal name of the company
    """

    business_industry: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="businessIndustry")
    ] = pydantic.Field(default=None)
    """
    The industry in which the business operates for a business customer
    """

    main_products_services_sold: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="mainProductsServicesSold")
    ] = pydantic.Field(default=None)
    """
    The key products and services provided by the company
    """

    user_segment: typing_extensions.Annotated[
        typing.Optional[BusinessUserSegment], FieldMetadata(alias="userSegment")
    ] = pydantic.Field(default=None)
    """
    Segmentation of the business user
    """

    user_registration_status: typing_extensions.Annotated[
        typing.Optional[UserRegistrationStatus], FieldMetadata(alias="userRegistrationStatus")
    ] = None
    operating_countries: typing_extensions.Annotated[
        typing.Optional[typing.List[CountryCode]], FieldMetadata(alias="operatingCountries")
    ] = pydantic.Field(default=None)
    """
    Countries where the business operates
    """

    alias: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    Alias names of the business entity
    """

    tags: typing.Optional[typing.List[Tag]] = pydantic.Field(default=None)
    """
    Additional information that can be added via tags
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
