# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing_extensions
from ..core.serialization import FieldMetadata
import typing
from .business_optional import BusinessOptional
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class BusinessUserEvent(UniversalBaseModel):
    """
    Model for business user-related events
    """

    timestamp: float = pydantic.Field()
    """
    Timestamp of the event
    """

    user_id: typing_extensions.Annotated[str, FieldMetadata(alias="userId")] = pydantic.Field()
    """
    Transaction ID the event pertains to
    """

    event_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="eventId")] = pydantic.Field(
        default=None
    )
    """
    Unique event ID
    """

    reason: typing.Optional[str] = pydantic.Field(default=None)
    """
    Reason for the event or a state change
    """

    event_description: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="eventDescription")] = (
        pydantic.Field(default=None)
    )
    """
    Event description
    """

    updated_business_user_attributes: typing_extensions.Annotated[
        typing.Optional[BusinessOptional], FieldMetadata(alias="updatedBusinessUserAttributes")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
