# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
import pydantic
from .email_id import EmailId
from .card_status import CardStatus
from .country_code import CountryCode
from .consumer_name import ConsumerName
from .card_expiry import CardExpiry
from .pos_details import PosDetails
from .card_brand import CardBrand
from .card_funding import CardFunding
from .card_type import CardType
from .amount import Amount
from .card_merchant_details import CardMerchantDetails
from .tag import Tag
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class CardDetails(UniversalBaseModel):
    """
    Model for credit or debit card details
    """

    card_fingerprint: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="cardFingerprint")] = (
        pydantic.Field(default=None)
    )
    """
    Unique card fingerprint that helps identify a specific card without having to use explicit card number. This is likely available at your card payment scheme provider
    """

    email_id: typing_extensions.Annotated[typing.Optional[EmailId], FieldMetadata(alias="emailId")] = None
    card_status: typing_extensions.Annotated[typing.Optional[CardStatus], FieldMetadata(alias="cardStatus")] = None
    card_issued_country: typing_extensions.Annotated[
        typing.Optional[CountryCode], FieldMetadata(alias="cardIssuedCountry")
    ] = None
    transaction_reference_field: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="transactionReferenceField")
    ] = pydantic.Field(default=None)
    """
    Reference for the transaction
    """

    f_3_ds_done: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="3dsDone")] = pydantic.Field(
        default=None
    )
    """
    Whether 3ds was successfully enforced for the transaction
    """

    name_on_card: typing_extensions.Annotated[typing.Optional[ConsumerName], FieldMetadata(alias="nameOnCard")] = None
    card_expiry: typing_extensions.Annotated[typing.Optional[CardExpiry], FieldMetadata(alias="cardExpiry")] = None
    pos_details: typing_extensions.Annotated[typing.Optional[PosDetails], FieldMetadata(alias="posDetails")] = None
    card_last_4_digits: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="cardLast4Digits")] = (
        pydantic.Field(default=None)
    )
    """
    Last 4 digits of Card
    """

    card_brand: typing_extensions.Annotated[typing.Optional[CardBrand], FieldMetadata(alias="cardBrand")] = None
    card_funding: typing_extensions.Annotated[typing.Optional[CardFunding], FieldMetadata(alias="cardFunding")] = None
    card_authenticated: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="cardAuthenticated")] = (
        pydantic.Field(default=None)
    )
    """
    Authentication of Card
    """

    card_tokenized: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="cardTokenized")] = (
        pydantic.Field(default=None)
    )
    """
    Was the card tokenized
    """

    card_present: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="cardPresent")] = (
        pydantic.Field(default=None)
    )
    """
    Card Present
    """

    payment_channel: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="paymentChannel")] = None
    card_type: typing_extensions.Annotated[typing.Optional[CardType], FieldMetadata(alias="cardType")] = None
    card_balance: typing_extensions.Annotated[typing.Optional[Amount], FieldMetadata(alias="cardBalance")] = None
    merchant_details: typing_extensions.Annotated[
        typing.Optional[CardMerchantDetails], FieldMetadata(alias="merchantDetails")
    ] = None
    network_provider_risk_score: typing_extensions.Annotated[
        typing.Optional[float], FieldMetadata(alias="networkProviderRiskScore")
    ] = pydantic.Field(default=None)
    """
    Risk score of the card from your network provider
    """

    tags: typing.Optional[typing.List[Tag]] = pydantic.Field(default=None)
    """
    Additional information that can be added via tags
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
