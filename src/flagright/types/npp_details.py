# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .address import Address
from .consumer_name import ConsumerName
from .email_id import EmailId
from .tag import Tag


class NppDetails(UniversalBaseModel):
    """
    New Payment Platform Details for Australia
    """

    account_number: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="accountNumber")] = (
        pydantic.Field(default=None)
    )
    """
    Account number
    """

    name: typing.Optional[ConsumerName] = None
    email_id: typing_extensions.Annotated[typing.Optional[EmailId], FieldMetadata(alias="emailId")] = None
    contact_number: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="contactNumber")] = (
        pydantic.Field(default=None)
    )
    """
    Contact number
    """

    bsb: typing.Optional[str] = pydantic.Field(default=None)
    """
    BSB number
    """

    pay_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="payId")] = pydantic.Field(
        default=None
    )
    """
    PayID
    """

    end_to_end_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="endToEndId")] = (
        pydantic.Field(default=None)
    )
    """
    End to End ID
    """

    osko_reference: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="oskoReference")] = (
        pydantic.Field(default=None)
    )
    """
    OSKO reference
    """

    pay_id_reference: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="payIdReference")] = (
        pydantic.Field(default=None)
    )
    """
    PayID reference
    """

    is_instant: typing_extensions.Annotated[typing.Optional[bool], FieldMetadata(alias="isInstant")] = pydantic.Field(
        default=None
    )
    """
    Whether the payment is instant
    """

    remittance_information: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="remittanceInformation")
    ] = pydantic.Field(default=None)
    """
    Remittance information
    """

    remittance_advice: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="remittanceAdvice")] = (
        pydantic.Field(default=None)
    )
    """
    Remittance advice
    """

    tags: typing.Optional[typing.List[Tag]] = pydantic.Field(default=None)
    """
    Additional information that can be added via tags
    """

    processing_date: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="processingDate")] = (
        pydantic.Field(default=None)
    )
    """
    Timestamp of the event
    """

    settlement_date: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="settlementDate")] = (
        pydantic.Field(default=None)
    )
    """
    Timestamp of the event
    """

    reference_number: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="referenceNumber")] = (
        pydantic.Field(default=None)
    )
    """
    Unique reference number for transaction reconciliation
    """

    trace_number: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="traceNumber")] = (
        pydantic.Field(default=None)
    )
    """
    Trace number for tracking the payment through the NPP system
    """

    message_format: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="messageFormat")] = (
        pydantic.Field(default=None)
    )
    """
    Format of the NPP message (e.g., JSON, XML)
    """

    bank_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="bankName")] = pydantic.Field(
        default=None
    )
    """
    Name of the bank associated with the account
    """

    address: typing.Optional[Address] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
