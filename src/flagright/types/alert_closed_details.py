# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ..core.serialization import FieldMetadata
from ..core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class AlertClosedDetails(UniversalBaseModel):
    alert_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="alertId")] = None
    status: typing.Optional[str] = None
    reasons: typing.Optional[typing.List[str]] = None
    reason_description_for_other: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="reasonDescriptionForOther")
    ] = None
    comment: typing.Optional[str] = None
    user_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="userId")] = None
    transaction_ids: typing_extensions.Annotated[
        typing.Optional[typing.List[str]], FieldMetadata(alias="transactionIds")
    ] = None
    rule_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="ruleName")] = None
    rule_description: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="ruleDescription")] = None
    rule_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="ruleId")] = None
    rule_instance_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="ruleInstanceId")] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
