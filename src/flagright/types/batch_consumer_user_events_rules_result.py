# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .batch_consumer_user_event_with_rules_result import BatchConsumerUserEventWithRulesResult


class BatchConsumerUserEventsRulesResult(UniversalBaseModel):
    consumer_user_events: typing_extensions.Annotated[
        typing.List[BatchConsumerUserEventWithRulesResult], FieldMetadata(alias="consumerUserEvents")
    ]
    total_count: typing_extensions.Annotated[float, FieldMetadata(alias="totalCount")]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
