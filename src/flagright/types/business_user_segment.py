# This file was auto-generated by Fern from our API Definition.

import enum
import typing

T_Result = typing.TypeVar("T_Result")


class BusinessUserSegment(str, enum.Enum):
    SOLE_PROPRIETORSHIP = "SOLE_PROPRIETORSHIP"
    LIMITED = "LIMITED"
    SMB = "SMB"
    SMALL = "SMALL"
    MEDIUM = "MEDIUM"
    LARGE = "LARGE"
    UNKNOWN = "UNKNOWN"

    def visit(
        self,
        sole_proprietorship: typing.Callable[[], T_Result],
        limited: typing.Callable[[], T_Result],
        smb: typing.Callable[[], T_Result],
        small: typing.Callable[[], T_Result],
        medium: typing.Callable[[], T_Result],
        large: typing.Callable[[], T_Result],
        unknown: typing.Callable[[], T_Result],
    ) -> T_Result:
        if self is BusinessUserSegment.SOLE_PROPRIETORSHIP:
            return sole_proprietorship()
        if self is BusinessUserSegment.LIMITED:
            return limited()
        if self is BusinessUserSegment.SMB:
            return smb()
        if self is BusinessUserSegment.SMALL:
            return small()
        if self is BusinessUserSegment.MEDIUM:
            return medium()
        if self is BusinessUserSegment.LARGE:
            return large()
        if self is BusinessUserSegment.UNKNOWN:
            return unknown()
