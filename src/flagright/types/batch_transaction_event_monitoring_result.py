# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic
import typing_extensions
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from ..core.serialization import FieldMetadata
from .device_data import DeviceData
from .hit_rules_details import HitRulesDetails
from .rule_action import RuleAction
from .transaction_risk_scoring_result import TransactionRiskScoringResult
from .transaction_state import TransactionState
from .transaction_updatable import TransactionUpdatable


class BatchTransactionEventMonitoringResult(UniversalBaseModel):
    transaction_state: typing_extensions.Annotated[TransactionState, FieldMetadata(alias="transactionState")]
    timestamp: float = pydantic.Field()
    """
    Timestamp of the event
    """

    transaction_id: typing_extensions.Annotated[str, FieldMetadata(alias="transactionId")] = pydantic.Field()
    """
    Transaction ID the event pertains to
    """

    event_id: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="eventId")] = pydantic.Field(
        default=None
    )
    """
    Unique event ID
    """

    reason: typing.Optional[str] = pydantic.Field(default=None)
    """
    Reason for the event or a state change
    """

    event_description: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="eventDescription")] = (
        pydantic.Field(default=None)
    )
    """
    Event description
    """

    updated_transaction_attributes: typing_extensions.Annotated[
        typing.Optional[TransactionUpdatable], FieldMetadata(alias="updatedTransactionAttributes")
    ] = None
    meta_data: typing_extensions.Annotated[typing.Optional[DeviceData], FieldMetadata(alias="metaData")] = None
    update_count: typing_extensions.Annotated[typing.Optional[float], FieldMetadata(alias="updateCount")] = None
    hit_rules: typing_extensions.Annotated[
        typing.Optional[typing.List[HitRulesDetails]], FieldMetadata(alias="hitRules")
    ] = None
    status: typing.Optional[RuleAction] = None
    risk_score_details: typing_extensions.Annotated[
        typing.Optional[TransactionRiskScoringResult], FieldMetadata(alias="riskScoreDetails")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
