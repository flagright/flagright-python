# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawBusinessUsersClient
from ..types.legal_entity import LegalEntity
from ..types.boolean_string import BooleanString
from ..types.user_state_details import UserStateDetails
from ..types.kyc_status_details import KycStatusDetails
from ..types.person import Person
from ..types.transaction_limits import TransactionLimits
from ..types.risk_level import RiskLevel
from ..types.payment_method import PaymentMethod
from ..types.user_entity_link import UserEntityLink
from ..types.acquisition_channel import AcquisitionChannel
from ..types.business_saved_payment_details_item import BusinessSavedPaymentDetailsItem
from ..types.mcc_details import MccDetails
from ..types.user_tag import UserTag
from ..types.person_attachment import PersonAttachment
from ..core.request_options import RequestOptions
from .types.business_users_create_response import BusinessUsersCreateResponse
from ..types.business_with_rules_result import BusinessWithRulesResult
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawBusinessUsersClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BusinessUsersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawBusinessUsersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawBusinessUsersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawBusinessUsersClient
        """
        return self._raw_client

    def create(
        self,
        *,
        user_id: str,
        created_timestamp: float,
        legal_entity: LegalEntity,
        lock_cra_risk_level: typing.Optional[BooleanString] = None,
        lock_kyc_risk_level: typing.Optional[BooleanString] = None,
        validate_user_id: typing.Optional[BooleanString] = None,
        krs_only: typing.Optional[BooleanString] = None,
        activated_timestamp: typing.Optional[float] = OMIT,
        user_state_details: typing.Optional[UserStateDetails] = OMIT,
        kyc_status_details: typing.Optional[KycStatusDetails] = OMIT,
        share_holders: typing.Optional[typing.Sequence[Person]] = OMIT,
        directors: typing.Optional[typing.Sequence[Person]] = OMIT,
        transaction_limits: typing.Optional[TransactionLimits] = OMIT,
        risk_level: typing.Optional[RiskLevel] = OMIT,
        kyc_risk_level: typing.Optional[RiskLevel] = OMIT,
        allowed_payment_methods: typing.Optional[typing.Sequence[PaymentMethod]] = OMIT,
        last_transaction_timestamp: typing.Optional[float] = OMIT,
        linked_entities: typing.Optional[UserEntityLink] = OMIT,
        acquisition_channel: typing.Optional[AcquisitionChannel] = OMIT,
        saved_payment_details: typing.Optional[typing.Sequence[BusinessSavedPaymentDetailsItem]] = OMIT,
        mcc_details: typing.Optional[MccDetails] = OMIT,
        tags: typing.Optional[typing.Sequence[UserTag]] = OMIT,
        attachments: typing.Optional[typing.Sequence[PersonAttachment]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BusinessUsersCreateResponse:
        """
        ## POST Business User

        `/business/user` endpoint allows you to operate on the Business user entity.

        In order to pass the payload of a User to Flagright and verify the User, you will need to call this endpoint with the User payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.

        ### Payload


        Each business user needs three mandatory fields:

        * `userId` - Unique identifier for the user
        * `legalEntity` - Details of the business legal entity (CompanyGeneralDetails, FinancialDetails etc) - only `legalName`in `CompanyGeneralDetails` is mandatory
        * `createdTimestamp` - UNIX timestamp in *milliseconds* for when the User is created in your system

        Parameters
        ----------
        user_id : str
            Unique user ID for the user

        created_timestamp : float
            Timestamp when the user was created

        legal_entity : LegalEntity

        lock_cra_risk_level : typing.Optional[BooleanString]
            Boolean string whether Flagright should lock the CRA risk level for the user.

        lock_kyc_risk_level : typing.Optional[BooleanString]
            Boolean string whether Flagright should lock the KYC risk level for the user.

        validate_user_id : typing.Optional[BooleanString]
            Boolean string whether Flagright should validate the userId

        krs_only : typing.Optional[BooleanString]

        activated_timestamp : typing.Optional[float]
            Timestamp when the user was activated

        user_state_details : typing.Optional[UserStateDetails]

        kyc_status_details : typing.Optional[KycStatusDetails]

        share_holders : typing.Optional[typing.Sequence[Person]]
            Shareholders (beneficiaries) of the company that hold at least 25% ownership. Can be another company or an individual

        directors : typing.Optional[typing.Sequence[Person]]
            Director(s) of the company. Must be at least one

        transaction_limits : typing.Optional[TransactionLimits]

        risk_level : typing.Optional[RiskLevel]

        kyc_risk_level : typing.Optional[RiskLevel]

        allowed_payment_methods : typing.Optional[typing.Sequence[PaymentMethod]]

        last_transaction_timestamp : typing.Optional[float]
            Timestamp of the last successful transaction of the user

        linked_entities : typing.Optional[UserEntityLink]

        acquisition_channel : typing.Optional[AcquisitionChannel]

        saved_payment_details : typing.Optional[typing.Sequence[BusinessSavedPaymentDetailsItem]]

        mcc_details : typing.Optional[MccDetails]

        tags : typing.Optional[typing.Sequence[UserTag]]
            Additional information that can be added via tags

        attachments : typing.Optional[typing.Sequence[PersonAttachment]]
            User's attachments uploaded by business user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BusinessUsersCreateResponse
            Created

        Examples
        --------
        from flagright import CompanyGeneralDetails, Flagright, LegalEntity

        client = Flagright(
            api_key="YOUR_API_KEY",
        )
        client.business_users.create(
            user_id="userId",
            created_timestamp=1.1,
            legal_entity=LegalEntity(
                company_general_details=CompanyGeneralDetails(
                    legal_name="Ozkan Hazelnut Export JSC",
                    business_industry=["Farming"],
                    main_products_services_sold=["Hazelnut"],
                ),
            ),
        )
        """
        response = self._raw_client.create(
            user_id=user_id,
            created_timestamp=created_timestamp,
            legal_entity=legal_entity,
            lock_cra_risk_level=lock_cra_risk_level,
            lock_kyc_risk_level=lock_kyc_risk_level,
            validate_user_id=validate_user_id,
            krs_only=krs_only,
            activated_timestamp=activated_timestamp,
            user_state_details=user_state_details,
            kyc_status_details=kyc_status_details,
            share_holders=share_holders,
            directors=directors,
            transaction_limits=transaction_limits,
            risk_level=risk_level,
            kyc_risk_level=kyc_risk_level,
            allowed_payment_methods=allowed_payment_methods,
            last_transaction_timestamp=last_transaction_timestamp,
            linked_entities=linked_entities,
            acquisition_channel=acquisition_channel,
            saved_payment_details=saved_payment_details,
            mcc_details=mcc_details,
            tags=tags,
            attachments=attachments,
            request_options=request_options,
        )
        return response.data

    def get(self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> BusinessWithRulesResult:
        """
        ### GET Business User

        `/business/user` endpoint allows you to operate on the Business User entity.

        Calling `GET /business/user/{userId}` will return the entire User payload and rule execution results for the User with the corresponding `userId`

        Parameters
        ----------
        user_id : str


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BusinessWithRulesResult
            OK

        Examples
        --------
        from flagright import Flagright

        client = Flagright(
            api_key="YOUR_API_KEY",
        )
        client.business_users.get(
            user_id="userId",
        )
        """
        response = self._raw_client.get(user_id, request_options=request_options)
        return response.data


class AsyncBusinessUsersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawBusinessUsersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawBusinessUsersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawBusinessUsersClient
        """
        return self._raw_client

    async def create(
        self,
        *,
        user_id: str,
        created_timestamp: float,
        legal_entity: LegalEntity,
        lock_cra_risk_level: typing.Optional[BooleanString] = None,
        lock_kyc_risk_level: typing.Optional[BooleanString] = None,
        validate_user_id: typing.Optional[BooleanString] = None,
        krs_only: typing.Optional[BooleanString] = None,
        activated_timestamp: typing.Optional[float] = OMIT,
        user_state_details: typing.Optional[UserStateDetails] = OMIT,
        kyc_status_details: typing.Optional[KycStatusDetails] = OMIT,
        share_holders: typing.Optional[typing.Sequence[Person]] = OMIT,
        directors: typing.Optional[typing.Sequence[Person]] = OMIT,
        transaction_limits: typing.Optional[TransactionLimits] = OMIT,
        risk_level: typing.Optional[RiskLevel] = OMIT,
        kyc_risk_level: typing.Optional[RiskLevel] = OMIT,
        allowed_payment_methods: typing.Optional[typing.Sequence[PaymentMethod]] = OMIT,
        last_transaction_timestamp: typing.Optional[float] = OMIT,
        linked_entities: typing.Optional[UserEntityLink] = OMIT,
        acquisition_channel: typing.Optional[AcquisitionChannel] = OMIT,
        saved_payment_details: typing.Optional[typing.Sequence[BusinessSavedPaymentDetailsItem]] = OMIT,
        mcc_details: typing.Optional[MccDetails] = OMIT,
        tags: typing.Optional[typing.Sequence[UserTag]] = OMIT,
        attachments: typing.Optional[typing.Sequence[PersonAttachment]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BusinessUsersCreateResponse:
        """
        ## POST Business User

        `/business/user` endpoint allows you to operate on the Business user entity.

        In order to pass the payload of a User to Flagright and verify the User, you will need to call this endpoint with the User payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.

        ### Payload


        Each business user needs three mandatory fields:

        * `userId` - Unique identifier for the user
        * `legalEntity` - Details of the business legal entity (CompanyGeneralDetails, FinancialDetails etc) - only `legalName`in `CompanyGeneralDetails` is mandatory
        * `createdTimestamp` - UNIX timestamp in *milliseconds* for when the User is created in your system

        Parameters
        ----------
        user_id : str
            Unique user ID for the user

        created_timestamp : float
            Timestamp when the user was created

        legal_entity : LegalEntity

        lock_cra_risk_level : typing.Optional[BooleanString]
            Boolean string whether Flagright should lock the CRA risk level for the user.

        lock_kyc_risk_level : typing.Optional[BooleanString]
            Boolean string whether Flagright should lock the KYC risk level for the user.

        validate_user_id : typing.Optional[BooleanString]
            Boolean string whether Flagright should validate the userId

        krs_only : typing.Optional[BooleanString]

        activated_timestamp : typing.Optional[float]
            Timestamp when the user was activated

        user_state_details : typing.Optional[UserStateDetails]

        kyc_status_details : typing.Optional[KycStatusDetails]

        share_holders : typing.Optional[typing.Sequence[Person]]
            Shareholders (beneficiaries) of the company that hold at least 25% ownership. Can be another company or an individual

        directors : typing.Optional[typing.Sequence[Person]]
            Director(s) of the company. Must be at least one

        transaction_limits : typing.Optional[TransactionLimits]

        risk_level : typing.Optional[RiskLevel]

        kyc_risk_level : typing.Optional[RiskLevel]

        allowed_payment_methods : typing.Optional[typing.Sequence[PaymentMethod]]

        last_transaction_timestamp : typing.Optional[float]
            Timestamp of the last successful transaction of the user

        linked_entities : typing.Optional[UserEntityLink]

        acquisition_channel : typing.Optional[AcquisitionChannel]

        saved_payment_details : typing.Optional[typing.Sequence[BusinessSavedPaymentDetailsItem]]

        mcc_details : typing.Optional[MccDetails]

        tags : typing.Optional[typing.Sequence[UserTag]]
            Additional information that can be added via tags

        attachments : typing.Optional[typing.Sequence[PersonAttachment]]
            User's attachments uploaded by business user

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BusinessUsersCreateResponse
            Created

        Examples
        --------
        import asyncio

        from flagright import AsyncFlagright, CompanyGeneralDetails, LegalEntity

        client = AsyncFlagright(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.business_users.create(
                user_id="userId",
                created_timestamp=1.1,
                legal_entity=LegalEntity(
                    company_general_details=CompanyGeneralDetails(
                        legal_name="Ozkan Hazelnut Export JSC",
                        business_industry=["Farming"],
                        main_products_services_sold=["Hazelnut"],
                    ),
                ),
            )


        asyncio.run(main())
        """
        response = await self._raw_client.create(
            user_id=user_id,
            created_timestamp=created_timestamp,
            legal_entity=legal_entity,
            lock_cra_risk_level=lock_cra_risk_level,
            lock_kyc_risk_level=lock_kyc_risk_level,
            validate_user_id=validate_user_id,
            krs_only=krs_only,
            activated_timestamp=activated_timestamp,
            user_state_details=user_state_details,
            kyc_status_details=kyc_status_details,
            share_holders=share_holders,
            directors=directors,
            transaction_limits=transaction_limits,
            risk_level=risk_level,
            kyc_risk_level=kyc_risk_level,
            allowed_payment_methods=allowed_payment_methods,
            last_transaction_timestamp=last_transaction_timestamp,
            linked_entities=linked_entities,
            acquisition_channel=acquisition_channel,
            saved_payment_details=saved_payment_details,
            mcc_details=mcc_details,
            tags=tags,
            attachments=attachments,
            request_options=request_options,
        )
        return response.data

    async def get(
        self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> BusinessWithRulesResult:
        """
        ### GET Business User

        `/business/user` endpoint allows you to operate on the Business User entity.

        Calling `GET /business/user/{userId}` will return the entire User payload and rule execution results for the User with the corresponding `userId`

        Parameters
        ----------
        user_id : str


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BusinessWithRulesResult
            OK

        Examples
        --------
        import asyncio

        from flagright import AsyncFlagright

        client = AsyncFlagright(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.business_users.get(
                user_id="userId",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get(user_id, request_options=request_options)
        return response.data
