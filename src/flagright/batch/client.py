# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawBatchClient
from ..types.transaction import Transaction
from ..types.boolean_string import BooleanString
from ..core.request_options import RequestOptions
from ..types.batch_response import BatchResponse
from ..types.transaction_event import TransactionEvent
from ..types.user import User
from ..types.business import Business
from ..types.consumer_user_event import ConsumerUserEvent
from ..types.business_user_event import BusinessUserEvent
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawBatchClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class BatchClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawBatchClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawBatchClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawBatchClient
        """
        return self._raw_client

    def verify_transaction(
        self,
        *,
        data: typing.Sequence[Transaction],
        validate_origin_user_id: typing.Optional[BooleanString] = None,
        validate_destination_user_id: typing.Optional[BooleanString] = None,
        batch_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BatchResponse:
        """
        Parameters
        ----------
        data : typing.Sequence[Transaction]

        validate_origin_user_id : typing.Optional[BooleanString]
            Boolean string whether Flagright should validate if provided originUserId exist. True by default

        validate_destination_user_id : typing.Optional[BooleanString]
            Boolean string whether Flagright should validate if provided destinationUserId exist. True by default

        batch_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BatchResponse
            Created

        Examples
        --------
        from flagright import Flagright, Transaction

        client = Flagright(
            api_key="YOUR_API_KEY",
        )
        client.batch.verify_transaction(
            data=[
                Transaction(
                    type="type",
                    transaction_id="transactionId",
                    timestamp=1.1,
                )
            ],
        )
        """
        response = self._raw_client.verify_transaction(
            data=data,
            validate_origin_user_id=validate_origin_user_id,
            validate_destination_user_id=validate_destination_user_id,
            batch_id=batch_id,
            request_options=request_options,
        )
        return response.data

    def create_transaction_events(
        self,
        *,
        data: typing.Sequence[TransactionEvent],
        batch_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BatchResponse:
        """
        Parameters
        ----------
        data : typing.Sequence[TransactionEvent]

        batch_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BatchResponse
            Created

        Examples
        --------
        from flagright import Flagright, TransactionEvent

        client = Flagright(
            api_key="YOUR_API_KEY",
        )
        client.batch.create_transaction_events(
            data=[
                TransactionEvent(
                    transaction_state="CREATED",
                    timestamp=1.1,
                    transaction_id="transactionId",
                )
            ],
        )
        """
        response = self._raw_client.create_transaction_events(
            data=data, batch_id=batch_id, request_options=request_options
        )
        return response.data

    def create_consumer_users(
        self,
        *,
        data: typing.Sequence[User],
        batch_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BatchResponse:
        """
        Parameters
        ----------
        data : typing.Sequence[User]

        batch_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BatchResponse
            Created

        Examples
        --------
        from flagright import Flagright, User

        client = Flagright(
            api_key="YOUR_API_KEY",
        )
        client.batch.create_consumer_users(
            data=[
                User(
                    user_id="userId",
                    created_timestamp=1.1,
                )
            ],
        )
        """
        response = self._raw_client.create_consumer_users(data=data, batch_id=batch_id, request_options=request_options)
        return response.data

    def create_business_users(
        self,
        *,
        data: typing.Sequence[Business],
        batch_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BatchResponse:
        """
        Parameters
        ----------
        data : typing.Sequence[Business]

        batch_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BatchResponse
            Created

        Examples
        --------
        from flagright import Business, CompanyGeneralDetails, Flagright, LegalEntity

        client = Flagright(
            api_key="YOUR_API_KEY",
        )
        client.batch.create_business_users(
            data=[
                Business(
                    user_id="userId",
                    created_timestamp=1.1,
                    legal_entity=LegalEntity(
                        company_general_details=CompanyGeneralDetails(
                            legal_name="Ozkan Hazelnut Export JSC",
                            business_industry=["Farming"],
                            main_products_services_sold=["Hazelnut"],
                        ),
                    ),
                )
            ],
        )
        """
        response = self._raw_client.create_business_users(data=data, batch_id=batch_id, request_options=request_options)
        return response.data

    def create_consumer_user_events(
        self,
        *,
        data: typing.Sequence[ConsumerUserEvent],
        batch_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BatchResponse:
        """
        Parameters
        ----------
        data : typing.Sequence[ConsumerUserEvent]

        batch_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BatchResponse
            Created

        Examples
        --------
        from flagright import ConsumerUserEvent, Flagright

        client = Flagright(
            api_key="YOUR_API_KEY",
        )
        client.batch.create_consumer_user_events(
            data=[
                ConsumerUserEvent(
                    timestamp=1.1,
                    user_id="userId",
                )
            ],
        )
        """
        response = self._raw_client.create_consumer_user_events(
            data=data, batch_id=batch_id, request_options=request_options
        )
        return response.data

    def create_business_user_events(
        self,
        *,
        data: typing.Sequence[BusinessUserEvent],
        batch_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BatchResponse:
        """
        Parameters
        ----------
        data : typing.Sequence[BusinessUserEvent]

        batch_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BatchResponse
            Created

        Examples
        --------
        from flagright import BusinessUserEvent, Flagright

        client = Flagright(
            api_key="YOUR_API_KEY",
        )
        client.batch.create_business_user_events(
            data=[
                BusinessUserEvent(
                    timestamp=1.1,
                    user_id="userId",
                )
            ],
        )
        """
        response = self._raw_client.create_business_user_events(
            data=data, batch_id=batch_id, request_options=request_options
        )
        return response.data


class AsyncBatchClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawBatchClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawBatchClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawBatchClient
        """
        return self._raw_client

    async def verify_transaction(
        self,
        *,
        data: typing.Sequence[Transaction],
        validate_origin_user_id: typing.Optional[BooleanString] = None,
        validate_destination_user_id: typing.Optional[BooleanString] = None,
        batch_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BatchResponse:
        """
        Parameters
        ----------
        data : typing.Sequence[Transaction]

        validate_origin_user_id : typing.Optional[BooleanString]
            Boolean string whether Flagright should validate if provided originUserId exist. True by default

        validate_destination_user_id : typing.Optional[BooleanString]
            Boolean string whether Flagright should validate if provided destinationUserId exist. True by default

        batch_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BatchResponse
            Created

        Examples
        --------
        import asyncio

        from flagright import AsyncFlagright, Transaction

        client = AsyncFlagright(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.batch.verify_transaction(
                data=[
                    Transaction(
                        type="type",
                        transaction_id="transactionId",
                        timestamp=1.1,
                    )
                ],
            )


        asyncio.run(main())
        """
        response = await self._raw_client.verify_transaction(
            data=data,
            validate_origin_user_id=validate_origin_user_id,
            validate_destination_user_id=validate_destination_user_id,
            batch_id=batch_id,
            request_options=request_options,
        )
        return response.data

    async def create_transaction_events(
        self,
        *,
        data: typing.Sequence[TransactionEvent],
        batch_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BatchResponse:
        """
        Parameters
        ----------
        data : typing.Sequence[TransactionEvent]

        batch_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BatchResponse
            Created

        Examples
        --------
        import asyncio

        from flagright import AsyncFlagright, TransactionEvent

        client = AsyncFlagright(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.batch.create_transaction_events(
                data=[
                    TransactionEvent(
                        transaction_state="CREATED",
                        timestamp=1.1,
                        transaction_id="transactionId",
                    )
                ],
            )


        asyncio.run(main())
        """
        response = await self._raw_client.create_transaction_events(
            data=data, batch_id=batch_id, request_options=request_options
        )
        return response.data

    async def create_consumer_users(
        self,
        *,
        data: typing.Sequence[User],
        batch_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BatchResponse:
        """
        Parameters
        ----------
        data : typing.Sequence[User]

        batch_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BatchResponse
            Created

        Examples
        --------
        import asyncio

        from flagright import AsyncFlagright, User

        client = AsyncFlagright(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.batch.create_consumer_users(
                data=[
                    User(
                        user_id="userId",
                        created_timestamp=1.1,
                    )
                ],
            )


        asyncio.run(main())
        """
        response = await self._raw_client.create_consumer_users(
            data=data, batch_id=batch_id, request_options=request_options
        )
        return response.data

    async def create_business_users(
        self,
        *,
        data: typing.Sequence[Business],
        batch_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BatchResponse:
        """
        Parameters
        ----------
        data : typing.Sequence[Business]

        batch_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BatchResponse
            Created

        Examples
        --------
        import asyncio

        from flagright import (
            AsyncFlagright,
            Business,
            CompanyGeneralDetails,
            LegalEntity,
        )

        client = AsyncFlagright(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.batch.create_business_users(
                data=[
                    Business(
                        user_id="userId",
                        created_timestamp=1.1,
                        legal_entity=LegalEntity(
                            company_general_details=CompanyGeneralDetails(
                                legal_name="Ozkan Hazelnut Export JSC",
                                business_industry=["Farming"],
                                main_products_services_sold=["Hazelnut"],
                            ),
                        ),
                    )
                ],
            )


        asyncio.run(main())
        """
        response = await self._raw_client.create_business_users(
            data=data, batch_id=batch_id, request_options=request_options
        )
        return response.data

    async def create_consumer_user_events(
        self,
        *,
        data: typing.Sequence[ConsumerUserEvent],
        batch_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BatchResponse:
        """
        Parameters
        ----------
        data : typing.Sequence[ConsumerUserEvent]

        batch_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BatchResponse
            Created

        Examples
        --------
        import asyncio

        from flagright import AsyncFlagright, ConsumerUserEvent

        client = AsyncFlagright(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.batch.create_consumer_user_events(
                data=[
                    ConsumerUserEvent(
                        timestamp=1.1,
                        user_id="userId",
                    )
                ],
            )


        asyncio.run(main())
        """
        response = await self._raw_client.create_consumer_user_events(
            data=data, batch_id=batch_id, request_options=request_options
        )
        return response.data

    async def create_business_user_events(
        self,
        *,
        data: typing.Sequence[BusinessUserEvent],
        batch_id: typing.Optional[str] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> BatchResponse:
        """
        Parameters
        ----------
        data : typing.Sequence[BusinessUserEvent]

        batch_id : typing.Optional[str]

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        BatchResponse
            Created

        Examples
        --------
        import asyncio

        from flagright import AsyncFlagright, BusinessUserEvent

        client = AsyncFlagright(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.batch.create_business_user_events(
                data=[
                    BusinessUserEvent(
                        timestamp=1.1,
                        user_id="userId",
                    )
                ],
            )


        asyncio.run(main())
        """
        response = await self._raw_client.create_business_user_events(
            data=data, batch_id=batch_id, request_options=request_options
        )
        return response.data
