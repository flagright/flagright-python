# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import httpx
from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import FlagrightEnvironment

if typing.TYPE_CHECKING:
    from .batch.client import AsyncBatchClient, BatchClient
    from .business_user_events.client import AsyncBusinessUserEventsClient, BusinessUserEventsClient
    from .business_users.client import AsyncBusinessUsersClient, BusinessUsersClient
    from .consumer_user_events.client import AsyncConsumerUserEventsClient, ConsumerUserEventsClient
    from .consumer_users.client import AsyncConsumerUsersClient, ConsumerUsersClient
    from .transaction_events.client import AsyncTransactionEventsClient, TransactionEventsClient
    from .transactions.client import AsyncTransactionsClient, TransactionsClient


class Flagright:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : FlagrightEnvironment
        The environment to use for requests from the client. from .environment import FlagrightEnvironment



        Defaults to FlagrightEnvironment.SANDBOX_API_SERVER_EU_1



    api_key : str
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.Client]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from flagright import Flagright

    client = Flagright(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: FlagrightEnvironment = FlagrightEnvironment.SANDBOX_API_SERVER_EU_1,
        api_key: str,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.Client] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.Client(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.Client(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._transactions: typing.Optional[TransactionsClient] = None
        self._batch: typing.Optional[BatchClient] = None
        self._transaction_events: typing.Optional[TransactionEventsClient] = None
        self._consumer_users: typing.Optional[ConsumerUsersClient] = None
        self._business_users: typing.Optional[BusinessUsersClient] = None
        self._consumer_user_events: typing.Optional[ConsumerUserEventsClient] = None
        self._business_user_events: typing.Optional[BusinessUserEventsClient] = None

    @property
    def transactions(self):
        if self._transactions is None:
            from .transactions.client import TransactionsClient  # noqa: E402

            self._transactions = TransactionsClient(client_wrapper=self._client_wrapper)
        return self._transactions

    @property
    def batch(self):
        if self._batch is None:
            from .batch.client import BatchClient  # noqa: E402

            self._batch = BatchClient(client_wrapper=self._client_wrapper)
        return self._batch

    @property
    def transaction_events(self):
        if self._transaction_events is None:
            from .transaction_events.client import TransactionEventsClient  # noqa: E402

            self._transaction_events = TransactionEventsClient(client_wrapper=self._client_wrapper)
        return self._transaction_events

    @property
    def consumer_users(self):
        if self._consumer_users is None:
            from .consumer_users.client import ConsumerUsersClient  # noqa: E402

            self._consumer_users = ConsumerUsersClient(client_wrapper=self._client_wrapper)
        return self._consumer_users

    @property
    def business_users(self):
        if self._business_users is None:
            from .business_users.client import BusinessUsersClient  # noqa: E402

            self._business_users = BusinessUsersClient(client_wrapper=self._client_wrapper)
        return self._business_users

    @property
    def consumer_user_events(self):
        if self._consumer_user_events is None:
            from .consumer_user_events.client import ConsumerUserEventsClient  # noqa: E402

            self._consumer_user_events = ConsumerUserEventsClient(client_wrapper=self._client_wrapper)
        return self._consumer_user_events

    @property
    def business_user_events(self):
        if self._business_user_events is None:
            from .business_user_events.client import BusinessUserEventsClient  # noqa: E402

            self._business_user_events = BusinessUserEventsClient(client_wrapper=self._client_wrapper)
        return self._business_user_events


class AsyncFlagright:
    """
    Use this class to access the different functions within the SDK. You can instantiate any number of clients with different configuration that will propagate to these functions.

    Parameters
    ----------
    base_url : typing.Optional[str]
        The base url to use for requests from the client.

    environment : FlagrightEnvironment
        The environment to use for requests from the client. from .environment import FlagrightEnvironment



        Defaults to FlagrightEnvironment.SANDBOX_API_SERVER_EU_1



    api_key : str
    headers : typing.Optional[typing.Dict[str, str]]
        Additional headers to send with every request.

    timeout : typing.Optional[float]
        The timeout to be used, in seconds, for requests. By default the timeout is 60 seconds, unless a custom httpx client is used, in which case this default is not enforced.

    follow_redirects : typing.Optional[bool]
        Whether the default httpx client follows redirects or not, this is irrelevant if a custom httpx client is passed in.

    httpx_client : typing.Optional[httpx.AsyncClient]
        The httpx client to use for making requests, a preconfigured client is used by default, however this is useful should you want to pass in any custom httpx configuration.

    Examples
    --------
    from flagright import AsyncFlagright

    client = AsyncFlagright(
        api_key="YOUR_API_KEY",
    )
    """

    def __init__(
        self,
        *,
        base_url: typing.Optional[str] = None,
        environment: FlagrightEnvironment = FlagrightEnvironment.SANDBOX_API_SERVER_EU_1,
        api_key: str,
        headers: typing.Optional[typing.Dict[str, str]] = None,
        timeout: typing.Optional[float] = None,
        follow_redirects: typing.Optional[bool] = True,
        httpx_client: typing.Optional[httpx.AsyncClient] = None,
    ):
        _defaulted_timeout = (
            timeout if timeout is not None else 60 if httpx_client is None else httpx_client.timeout.read
        )
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            api_key=api_key,
            headers=headers,
            httpx_client=httpx_client
            if httpx_client is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout, follow_redirects=follow_redirects)
            if follow_redirects is not None
            else httpx.AsyncClient(timeout=_defaulted_timeout),
            timeout=_defaulted_timeout,
        )
        self._transactions: typing.Optional[AsyncTransactionsClient] = None
        self._batch: typing.Optional[AsyncBatchClient] = None
        self._transaction_events: typing.Optional[AsyncTransactionEventsClient] = None
        self._consumer_users: typing.Optional[AsyncConsumerUsersClient] = None
        self._business_users: typing.Optional[AsyncBusinessUsersClient] = None
        self._consumer_user_events: typing.Optional[AsyncConsumerUserEventsClient] = None
        self._business_user_events: typing.Optional[AsyncBusinessUserEventsClient] = None

    @property
    def transactions(self):
        if self._transactions is None:
            from .transactions.client import AsyncTransactionsClient  # noqa: E402

            self._transactions = AsyncTransactionsClient(client_wrapper=self._client_wrapper)
        return self._transactions

    @property
    def batch(self):
        if self._batch is None:
            from .batch.client import AsyncBatchClient  # noqa: E402

            self._batch = AsyncBatchClient(client_wrapper=self._client_wrapper)
        return self._batch

    @property
    def transaction_events(self):
        if self._transaction_events is None:
            from .transaction_events.client import AsyncTransactionEventsClient  # noqa: E402

            self._transaction_events = AsyncTransactionEventsClient(client_wrapper=self._client_wrapper)
        return self._transaction_events

    @property
    def consumer_users(self):
        if self._consumer_users is None:
            from .consumer_users.client import AsyncConsumerUsersClient  # noqa: E402

            self._consumer_users = AsyncConsumerUsersClient(client_wrapper=self._client_wrapper)
        return self._consumer_users

    @property
    def business_users(self):
        if self._business_users is None:
            from .business_users.client import AsyncBusinessUsersClient  # noqa: E402

            self._business_users = AsyncBusinessUsersClient(client_wrapper=self._client_wrapper)
        return self._business_users

    @property
    def consumer_user_events(self):
        if self._consumer_user_events is None:
            from .consumer_user_events.client import AsyncConsumerUserEventsClient  # noqa: E402

            self._consumer_user_events = AsyncConsumerUserEventsClient(client_wrapper=self._client_wrapper)
        return self._consumer_user_events

    @property
    def business_user_events(self):
        if self._business_user_events is None:
            from .business_user_events.client import AsyncBusinessUserEventsClient  # noqa: E402

            self._business_user_events = AsyncBusinessUserEventsClient(client_wrapper=self._client_wrapper)
        return self._business_user_events


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: FlagrightEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
