# This file was auto-generated by Fern from our API Definition.

import typing

import httpx

from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import FlagrightEnvironment
from .resources.business_user_events.client import AsyncBusinessUserEventsClient, BusinessUserEventsClient
from .resources.business_users.client import AsyncBusinessUsersClient, BusinessUsersClient
from .resources.consumer_user_events.client import AsyncConsumerUserEventsClient, ConsumerUserEventsClient
from .resources.consumer_users.client import AsyncConsumerUsersClient, ConsumerUsersClient
from .resources.transaction_events.client import AsyncTransactionEventsClient, TransactionEventsClient
from .resources.transactions.client import AsyncTransactionsClient, TransactionsClient


class Flagright:
    def __init__(
        self,
        *,
        environment: FlagrightEnvironment = FlagrightEnvironment.DEFAULT,
        api_key: str,
        timeout: typing.Optional[float] = 60
    ):
        self._environment = environment
        self._client_wrapper = SyncClientWrapper(api_key=api_key, httpx_client=httpx.Client(timeout=timeout))
        self.transactions = TransactionsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.transaction_events = TransactionEventsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.consumer_users = ConsumerUsersClient(environment=environment, client_wrapper=self._client_wrapper)
        self.business_users = BusinessUsersClient(environment=environment, client_wrapper=self._client_wrapper)
        self.consumer_user_events = ConsumerUserEventsClient(
            environment=environment, client_wrapper=self._client_wrapper
        )
        self.business_user_events = BusinessUserEventsClient(
            environment=environment, client_wrapper=self._client_wrapper
        )


class AsyncFlagright:
    def __init__(
        self,
        *,
        environment: FlagrightEnvironment = FlagrightEnvironment.DEFAULT,
        api_key: str,
        timeout: typing.Optional[float] = 60
    ):
        self._environment = environment
        self._client_wrapper = AsyncClientWrapper(api_key=api_key, httpx_client=httpx.AsyncClient(timeout=timeout))
        self.transactions = AsyncTransactionsClient(environment=environment, client_wrapper=self._client_wrapper)
        self.transaction_events = AsyncTransactionEventsClient(
            environment=environment, client_wrapper=self._client_wrapper
        )
        self.consumer_users = AsyncConsumerUsersClient(environment=environment, client_wrapper=self._client_wrapper)
        self.business_users = AsyncBusinessUsersClient(environment=environment, client_wrapper=self._client_wrapper)
        self.consumer_user_events = AsyncConsumerUserEventsClient(
            environment=environment, client_wrapper=self._client_wrapper
        )
        self.business_user_events = AsyncBusinessUserEventsClient(
            environment=environment, client_wrapper=self._client_wrapper
        )
