# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from .raw_client import RawConsumerUsersClient
from ..types.boolean_string import BooleanString
from ..types.user_details import UserDetails
from ..types.user_state_details import UserStateDetails
from ..types.kyc_status_details import KycStatusDetails
from ..types.employment_status import EmploymentStatus
from ..types.legal_document import LegalDocument
from ..types.contact_details import ContactDetails
from ..types.employment_details import EmploymentDetails
from ..types.transaction_limits import TransactionLimits
from ..types.expected_income import ExpectedIncome
from ..types.risk_level import RiskLevel
from ..types.acquisition_channel import AcquisitionChannel
from ..types.source_of_funds import SourceOfFunds
from ..types.consumer_user_segment import ConsumerUserSegment
from ..types.pep_status import PepStatus
from ..types.user_entity_link import UserEntityLink
from ..types.user_saved_payment_details_item import UserSavedPaymentDetailsItem
from ..types.user_tag import UserTag
from ..types.person_attachment import PersonAttachment
from ..core.request_options import RequestOptions
from .types.consumer_users_create_response import ConsumerUsersCreateResponse
from ..types.user_with_rules_result import UserWithRulesResult
from ..core.client_wrapper import AsyncClientWrapper
from .raw_client import AsyncRawConsumerUsersClient

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class ConsumerUsersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawConsumerUsersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawConsumerUsersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawConsumerUsersClient
        """
        return self._raw_client

    def create(
        self,
        *,
        user_id: str,
        created_timestamp: float,
        lock_cra_risk_level: typing.Optional[BooleanString] = None,
        lock_kyc_risk_level: typing.Optional[BooleanString] = None,
        validate_user_id: typing.Optional[BooleanString] = None,
        krs_only: typing.Optional[BooleanString] = None,
        activated_timestamp: typing.Optional[float] = OMIT,
        user_details: typing.Optional[UserDetails] = OMIT,
        user_state_details: typing.Optional[UserStateDetails] = OMIT,
        kyc_status_details: typing.Optional[KycStatusDetails] = OMIT,
        eodd_date: typing.Optional[float] = OMIT,
        employment_status: typing.Optional[EmploymentStatus] = OMIT,
        occupation: typing.Optional[str] = OMIT,
        legal_documents: typing.Optional[typing.Sequence[LegalDocument]] = OMIT,
        contact_details: typing.Optional[ContactDetails] = OMIT,
        employment_details: typing.Optional[EmploymentDetails] = OMIT,
        transaction_limits: typing.Optional[TransactionLimits] = OMIT,
        expected_income: typing.Optional[ExpectedIncome] = OMIT,
        risk_level: typing.Optional[RiskLevel] = OMIT,
        kyc_risk_level: typing.Optional[RiskLevel] = OMIT,
        acquisition_channel: typing.Optional[AcquisitionChannel] = OMIT,
        reason_for_account_opening: typing.Optional[typing.Sequence[str]] = OMIT,
        source_of_funds: typing.Optional[typing.Sequence[SourceOfFunds]] = OMIT,
        user_segment: typing.Optional[ConsumerUserSegment] = OMIT,
        pep_status: typing.Optional[typing.Sequence[PepStatus]] = OMIT,
        last_transaction_timestamp: typing.Optional[float] = OMIT,
        linked_entities: typing.Optional[UserEntityLink] = OMIT,
        saved_payment_details: typing.Optional[typing.Sequence[UserSavedPaymentDetailsItem]] = OMIT,
        tags: typing.Optional[typing.Sequence[UserTag]] = OMIT,
        attachments: typing.Optional[typing.Sequence[PersonAttachment]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ConsumerUsersCreateResponse:
        """
        ## POST Consumer User

        `/consumer/user` endpoint allows you to operate on the Consumer user entity.

        In order to pass the payload of a User to Flagright and verify the User, you will need to call this endpoint with the User payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.

        ### Payload

        Each consumer user needs two mandatory fields:

        * `userId` - Unique identifier for the user
        * `createdTimestamp` - UNIX timestamp in *milliseconds* for when the User is created in your system

        Parameters
        ----------
        user_id : str
            Unique user ID

        created_timestamp : float
            Timestamp when userId is created

        lock_cra_risk_level : typing.Optional[BooleanString]
            Boolean string whether Flagright should lock the CRA risk level for the user.

        lock_kyc_risk_level : typing.Optional[BooleanString]
            Boolean string whether Flagright should lock the KYC risk level for the user.

        validate_user_id : typing.Optional[BooleanString]
            Boolean string whether Flagright should validate the userId

        krs_only : typing.Optional[BooleanString]

        activated_timestamp : typing.Optional[float]
            Timestamp when user was activated

        user_details : typing.Optional[UserDetails]

        user_state_details : typing.Optional[UserStateDetails]

        kyc_status_details : typing.Optional[KycStatusDetails]

        eodd_date : typing.Optional[float]

        employment_status : typing.Optional[EmploymentStatus]

        occupation : typing.Optional[str]

        legal_documents : typing.Optional[typing.Sequence[LegalDocument]]
            User's legal identity documents - See Document Model for details

        contact_details : typing.Optional[ContactDetails]

        employment_details : typing.Optional[EmploymentDetails]

        transaction_limits : typing.Optional[TransactionLimits]

        expected_income : typing.Optional[ExpectedIncome]

        risk_level : typing.Optional[RiskLevel]

        kyc_risk_level : typing.Optional[RiskLevel]

        acquisition_channel : typing.Optional[AcquisitionChannel]

        reason_for_account_opening : typing.Optional[typing.Sequence[str]]

        source_of_funds : typing.Optional[typing.Sequence[SourceOfFunds]]

        user_segment : typing.Optional[ConsumerUserSegment]

        pep_status : typing.Optional[typing.Sequence[PepStatus]]

        last_transaction_timestamp : typing.Optional[float]
            Timestamp of the last successful transaction of the user

        linked_entities : typing.Optional[UserEntityLink]

        saved_payment_details : typing.Optional[typing.Sequence[UserSavedPaymentDetailsItem]]

        tags : typing.Optional[typing.Sequence[UserTag]]
            Additional information that can be added via tags

        attachments : typing.Optional[typing.Sequence[PersonAttachment]]
            Uploaded user's attachment

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConsumerUsersCreateResponse
            Created

        Examples
        --------
        from flagright import (
            Address,
            ConsumerName,
            ContactDetails,
            Flagright,
            LegalDocument,
            Tag,
            UserDetails,
            UserTag,
        )

        client = Flagright(
            api_key="YOUR_API_KEY",
        )
        client.consumer_users.create(
            user_id="96647cfd9e8fe66ee0f3362e011e34e8",
            created_timestamp=1641654664000.0,
            user_details=UserDetails(
                name=ConsumerName(
                    first_name="Baran",
                    middle_name="Realblood",
                    last_name="Ozkan",
                ),
                date_of_birth="1991-01-01",
                country_of_residence="US",
                country_of_nationality="DE",
            ),
            legal_documents=[
                LegalDocument(
                    document_type="passport",
                    document_number="Z9431P",
                    document_issued_date=1639939034000.0,
                    document_expiration_date=1839939034000.0,
                    document_issued_country="DE",
                    tags=[
                        Tag(
                            key="customerType",
                            value="wallet",
                        )
                    ],
                )
            ],
            contact_details=ContactDetails(
                email_ids=["baran@flagright.com"],
                contact_numbers=["+37112345432"],
                websites=["flagright.com"],
                addresses=[
                    Address(
                        address_lines=["Klara-Franke Str 20"],
                        postcode="10557",
                        city="Berlin",
                        state="Berlin",
                        country="Germany",
                        tags=[
                            Tag(
                                key="customKey",
                                value="customValue",
                            )
                        ],
                    )
                ],
            ),
            tags=[
                UserTag(
                    key="customKey",
                    value="customValue",
                )
            ],
        )
        """
        response = self._raw_client.create(
            user_id=user_id,
            created_timestamp=created_timestamp,
            lock_cra_risk_level=lock_cra_risk_level,
            lock_kyc_risk_level=lock_kyc_risk_level,
            validate_user_id=validate_user_id,
            krs_only=krs_only,
            activated_timestamp=activated_timestamp,
            user_details=user_details,
            user_state_details=user_state_details,
            kyc_status_details=kyc_status_details,
            eodd_date=eodd_date,
            employment_status=employment_status,
            occupation=occupation,
            legal_documents=legal_documents,
            contact_details=contact_details,
            employment_details=employment_details,
            transaction_limits=transaction_limits,
            expected_income=expected_income,
            risk_level=risk_level,
            kyc_risk_level=kyc_risk_level,
            acquisition_channel=acquisition_channel,
            reason_for_account_opening=reason_for_account_opening,
            source_of_funds=source_of_funds,
            user_segment=user_segment,
            pep_status=pep_status,
            last_transaction_timestamp=last_transaction_timestamp,
            linked_entities=linked_entities,
            saved_payment_details=saved_payment_details,
            tags=tags,
            attachments=attachments,
            request_options=request_options,
        )
        return response.data

    def get(self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None) -> UserWithRulesResult:
        """
        ### GET Consumer User

        `/consumer/user` endpoint allows you to operate on the Consumer User entity.

        Calling `GET /consumer/user/{userId}` will return the entire user payload and rule execution results for the user with the corresponding `userId`

        Parameters
        ----------
        user_id : str


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserWithRulesResult
            OK

        Examples
        --------
        from flagright import Flagright

        client = Flagright(
            api_key="YOUR_API_KEY",
        )
        client.consumer_users.get(
            user_id="userId",
        )
        """
        response = self._raw_client.get(user_id, request_options=request_options)
        return response.data


class AsyncConsumerUsersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawConsumerUsersClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawConsumerUsersClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawConsumerUsersClient
        """
        return self._raw_client

    async def create(
        self,
        *,
        user_id: str,
        created_timestamp: float,
        lock_cra_risk_level: typing.Optional[BooleanString] = None,
        lock_kyc_risk_level: typing.Optional[BooleanString] = None,
        validate_user_id: typing.Optional[BooleanString] = None,
        krs_only: typing.Optional[BooleanString] = None,
        activated_timestamp: typing.Optional[float] = OMIT,
        user_details: typing.Optional[UserDetails] = OMIT,
        user_state_details: typing.Optional[UserStateDetails] = OMIT,
        kyc_status_details: typing.Optional[KycStatusDetails] = OMIT,
        eodd_date: typing.Optional[float] = OMIT,
        employment_status: typing.Optional[EmploymentStatus] = OMIT,
        occupation: typing.Optional[str] = OMIT,
        legal_documents: typing.Optional[typing.Sequence[LegalDocument]] = OMIT,
        contact_details: typing.Optional[ContactDetails] = OMIT,
        employment_details: typing.Optional[EmploymentDetails] = OMIT,
        transaction_limits: typing.Optional[TransactionLimits] = OMIT,
        expected_income: typing.Optional[ExpectedIncome] = OMIT,
        risk_level: typing.Optional[RiskLevel] = OMIT,
        kyc_risk_level: typing.Optional[RiskLevel] = OMIT,
        acquisition_channel: typing.Optional[AcquisitionChannel] = OMIT,
        reason_for_account_opening: typing.Optional[typing.Sequence[str]] = OMIT,
        source_of_funds: typing.Optional[typing.Sequence[SourceOfFunds]] = OMIT,
        user_segment: typing.Optional[ConsumerUserSegment] = OMIT,
        pep_status: typing.Optional[typing.Sequence[PepStatus]] = OMIT,
        last_transaction_timestamp: typing.Optional[float] = OMIT,
        linked_entities: typing.Optional[UserEntityLink] = OMIT,
        saved_payment_details: typing.Optional[typing.Sequence[UserSavedPaymentDetailsItem]] = OMIT,
        tags: typing.Optional[typing.Sequence[UserTag]] = OMIT,
        attachments: typing.Optional[typing.Sequence[PersonAttachment]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> ConsumerUsersCreateResponse:
        """
        ## POST Consumer User

        `/consumer/user` endpoint allows you to operate on the Consumer user entity.

        In order to pass the payload of a User to Flagright and verify the User, you will need to call this endpoint with the User payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.

        ### Payload

        Each consumer user needs two mandatory fields:

        * `userId` - Unique identifier for the user
        * `createdTimestamp` - UNIX timestamp in *milliseconds* for when the User is created in your system

        Parameters
        ----------
        user_id : str
            Unique user ID

        created_timestamp : float
            Timestamp when userId is created

        lock_cra_risk_level : typing.Optional[BooleanString]
            Boolean string whether Flagright should lock the CRA risk level for the user.

        lock_kyc_risk_level : typing.Optional[BooleanString]
            Boolean string whether Flagright should lock the KYC risk level for the user.

        validate_user_id : typing.Optional[BooleanString]
            Boolean string whether Flagright should validate the userId

        krs_only : typing.Optional[BooleanString]

        activated_timestamp : typing.Optional[float]
            Timestamp when user was activated

        user_details : typing.Optional[UserDetails]

        user_state_details : typing.Optional[UserStateDetails]

        kyc_status_details : typing.Optional[KycStatusDetails]

        eodd_date : typing.Optional[float]

        employment_status : typing.Optional[EmploymentStatus]

        occupation : typing.Optional[str]

        legal_documents : typing.Optional[typing.Sequence[LegalDocument]]
            User's legal identity documents - See Document Model for details

        contact_details : typing.Optional[ContactDetails]

        employment_details : typing.Optional[EmploymentDetails]

        transaction_limits : typing.Optional[TransactionLimits]

        expected_income : typing.Optional[ExpectedIncome]

        risk_level : typing.Optional[RiskLevel]

        kyc_risk_level : typing.Optional[RiskLevel]

        acquisition_channel : typing.Optional[AcquisitionChannel]

        reason_for_account_opening : typing.Optional[typing.Sequence[str]]

        source_of_funds : typing.Optional[typing.Sequence[SourceOfFunds]]

        user_segment : typing.Optional[ConsumerUserSegment]

        pep_status : typing.Optional[typing.Sequence[PepStatus]]

        last_transaction_timestamp : typing.Optional[float]
            Timestamp of the last successful transaction of the user

        linked_entities : typing.Optional[UserEntityLink]

        saved_payment_details : typing.Optional[typing.Sequence[UserSavedPaymentDetailsItem]]

        tags : typing.Optional[typing.Sequence[UserTag]]
            Additional information that can be added via tags

        attachments : typing.Optional[typing.Sequence[PersonAttachment]]
            Uploaded user's attachment

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        ConsumerUsersCreateResponse
            Created

        Examples
        --------
        import asyncio

        from flagright import (
            Address,
            AsyncFlagright,
            ConsumerName,
            ContactDetails,
            LegalDocument,
            Tag,
            UserDetails,
            UserTag,
        )

        client = AsyncFlagright(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.consumer_users.create(
                user_id="96647cfd9e8fe66ee0f3362e011e34e8",
                created_timestamp=1641654664000.0,
                user_details=UserDetails(
                    name=ConsumerName(
                        first_name="Baran",
                        middle_name="Realblood",
                        last_name="Ozkan",
                    ),
                    date_of_birth="1991-01-01",
                    country_of_residence="US",
                    country_of_nationality="DE",
                ),
                legal_documents=[
                    LegalDocument(
                        document_type="passport",
                        document_number="Z9431P",
                        document_issued_date=1639939034000.0,
                        document_expiration_date=1839939034000.0,
                        document_issued_country="DE",
                        tags=[
                            Tag(
                                key="customerType",
                                value="wallet",
                            )
                        ],
                    )
                ],
                contact_details=ContactDetails(
                    email_ids=["baran@flagright.com"],
                    contact_numbers=["+37112345432"],
                    websites=["flagright.com"],
                    addresses=[
                        Address(
                            address_lines=["Klara-Franke Str 20"],
                            postcode="10557",
                            city="Berlin",
                            state="Berlin",
                            country="Germany",
                            tags=[
                                Tag(
                                    key="customKey",
                                    value="customValue",
                                )
                            ],
                        )
                    ],
                ),
                tags=[
                    UserTag(
                        key="customKey",
                        value="customValue",
                    )
                ],
            )


        asyncio.run(main())
        """
        response = await self._raw_client.create(
            user_id=user_id,
            created_timestamp=created_timestamp,
            lock_cra_risk_level=lock_cra_risk_level,
            lock_kyc_risk_level=lock_kyc_risk_level,
            validate_user_id=validate_user_id,
            krs_only=krs_only,
            activated_timestamp=activated_timestamp,
            user_details=user_details,
            user_state_details=user_state_details,
            kyc_status_details=kyc_status_details,
            eodd_date=eodd_date,
            employment_status=employment_status,
            occupation=occupation,
            legal_documents=legal_documents,
            contact_details=contact_details,
            employment_details=employment_details,
            transaction_limits=transaction_limits,
            expected_income=expected_income,
            risk_level=risk_level,
            kyc_risk_level=kyc_risk_level,
            acquisition_channel=acquisition_channel,
            reason_for_account_opening=reason_for_account_opening,
            source_of_funds=source_of_funds,
            user_segment=user_segment,
            pep_status=pep_status,
            last_transaction_timestamp=last_transaction_timestamp,
            linked_entities=linked_entities,
            saved_payment_details=saved_payment_details,
            tags=tags,
            attachments=attachments,
            request_options=request_options,
        )
        return response.data

    async def get(
        self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> UserWithRulesResult:
        """
        ### GET Consumer User

        `/consumer/user` endpoint allows you to operate on the Consumer User entity.

        Calling `GET /consumer/user/{userId}` will return the entire user payload and rule execution results for the user with the corresponding `userId`

        Parameters
        ----------
        user_id : str


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        UserWithRulesResult
            OK

        Examples
        --------
        import asyncio

        from flagright import AsyncFlagright

        client = AsyncFlagright(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.consumer_users.get(
                user_id="userId",
            )


        asyncio.run(main())
        """
        response = await self._raw_client.get(user_id, request_options=request_options)
        return response.data
