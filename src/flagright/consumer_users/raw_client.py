# This file was auto-generated by Fern from our API Definition.

import typing
from ..core.client_wrapper import SyncClientWrapper
from ..types.boolean_string import BooleanString
from ..types.user_details import UserDetails
from ..types.user_state_details import UserStateDetails
from ..types.kyc_status_details import KycStatusDetails
from ..types.employment_status import EmploymentStatus
from ..types.legal_document import LegalDocument
from ..types.contact_details import ContactDetails
from ..types.employment_details import EmploymentDetails
from ..types.transaction_limits import TransactionLimits
from ..types.expected_income import ExpectedIncome
from ..types.risk_level import RiskLevel
from ..types.acquisition_channel import AcquisitionChannel
from ..types.source_of_funds import SourceOfFunds
from ..types.consumer_user_segment import ConsumerUserSegment
from ..types.pep_status import PepStatus
from ..types.user_entity_link import UserEntityLink
from ..types.user_saved_payment_details_item import UserSavedPaymentDetailsItem
from ..types.user_tag import UserTag
from ..types.person_attachment import PersonAttachment
from ..core.request_options import RequestOptions
from ..core.http_response import HttpResponse
from .types.consumer_users_create_response import ConsumerUsersCreateResponse
from ..core.serialization import convert_and_respect_annotation_metadata
from ..core.pydantic_utilities import parse_obj_as
from ..errors.bad_request_error import BadRequestError
from ..types.api_error_response import ApiErrorResponse
from ..errors.unauthorized_error import UnauthorizedError
from ..errors.too_many_requests_error import TooManyRequestsError
from json.decoder import JSONDecodeError
from ..core.api_error import ApiError
from ..types.user_with_rules_result import UserWithRulesResult
from ..core.jsonable_encoder import jsonable_encoder
from ..core.client_wrapper import AsyncClientWrapper
from ..core.http_response import AsyncHttpResponse

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class RawConsumerUsersClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def create(
        self,
        *,
        user_id: str,
        created_timestamp: float,
        lock_cra_risk_level: typing.Optional[BooleanString] = None,
        lock_kyc_risk_level: typing.Optional[BooleanString] = None,
        validate_user_id: typing.Optional[BooleanString] = None,
        krs_only: typing.Optional[BooleanString] = None,
        activated_timestamp: typing.Optional[float] = OMIT,
        user_details: typing.Optional[UserDetails] = OMIT,
        user_state_details: typing.Optional[UserStateDetails] = OMIT,
        kyc_status_details: typing.Optional[KycStatusDetails] = OMIT,
        eodd_date: typing.Optional[float] = OMIT,
        employment_status: typing.Optional[EmploymentStatus] = OMIT,
        occupation: typing.Optional[str] = OMIT,
        legal_documents: typing.Optional[typing.Sequence[LegalDocument]] = OMIT,
        contact_details: typing.Optional[ContactDetails] = OMIT,
        employment_details: typing.Optional[EmploymentDetails] = OMIT,
        transaction_limits: typing.Optional[TransactionLimits] = OMIT,
        expected_income: typing.Optional[ExpectedIncome] = OMIT,
        risk_level: typing.Optional[RiskLevel] = OMIT,
        kyc_risk_level: typing.Optional[RiskLevel] = OMIT,
        acquisition_channel: typing.Optional[AcquisitionChannel] = OMIT,
        reason_for_account_opening: typing.Optional[typing.Sequence[str]] = OMIT,
        source_of_funds: typing.Optional[typing.Sequence[SourceOfFunds]] = OMIT,
        user_segment: typing.Optional[ConsumerUserSegment] = OMIT,
        pep_status: typing.Optional[typing.Sequence[PepStatus]] = OMIT,
        last_transaction_timestamp: typing.Optional[float] = OMIT,
        linked_entities: typing.Optional[UserEntityLink] = OMIT,
        saved_payment_details: typing.Optional[typing.Sequence[UserSavedPaymentDetailsItem]] = OMIT,
        tags: typing.Optional[typing.Sequence[UserTag]] = OMIT,
        attachments: typing.Optional[typing.Sequence[PersonAttachment]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> HttpResponse[ConsumerUsersCreateResponse]:
        """
        ## POST Consumer User

        `/consumer/user` endpoint allows you to operate on the Consumer user entity.

        In order to pass the payload of a User to Flagright and verify the User, you will need to call this endpoint with the User payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.

        ### Payload

        Each consumer user needs two mandatory fields:

        * `userId` - Unique identifier for the user
        * `createdTimestamp` - UNIX timestamp in *milliseconds* for when the User is created in your system

        Parameters
        ----------
        user_id : str
            Unique user ID

        created_timestamp : float
            Timestamp when userId is created

        lock_cra_risk_level : typing.Optional[BooleanString]
            Boolean string whether Flagright should lock the CRA risk level for the user.

        lock_kyc_risk_level : typing.Optional[BooleanString]
            Boolean string whether Flagright should lock the KYC risk level for the user.

        validate_user_id : typing.Optional[BooleanString]
            Boolean string whether Flagright should validate the userId

        krs_only : typing.Optional[BooleanString]

        activated_timestamp : typing.Optional[float]
            Timestamp when user was activated

        user_details : typing.Optional[UserDetails]

        user_state_details : typing.Optional[UserStateDetails]

        kyc_status_details : typing.Optional[KycStatusDetails]

        eodd_date : typing.Optional[float]

        employment_status : typing.Optional[EmploymentStatus]

        occupation : typing.Optional[str]

        legal_documents : typing.Optional[typing.Sequence[LegalDocument]]
            User's legal identity documents - See Document Model for details

        contact_details : typing.Optional[ContactDetails]

        employment_details : typing.Optional[EmploymentDetails]

        transaction_limits : typing.Optional[TransactionLimits]

        expected_income : typing.Optional[ExpectedIncome]

        risk_level : typing.Optional[RiskLevel]

        kyc_risk_level : typing.Optional[RiskLevel]

        acquisition_channel : typing.Optional[AcquisitionChannel]

        reason_for_account_opening : typing.Optional[typing.Sequence[str]]

        source_of_funds : typing.Optional[typing.Sequence[SourceOfFunds]]

        user_segment : typing.Optional[ConsumerUserSegment]

        pep_status : typing.Optional[typing.Sequence[PepStatus]]

        last_transaction_timestamp : typing.Optional[float]
            Timestamp of the last successful transaction of the user

        linked_entities : typing.Optional[UserEntityLink]

        saved_payment_details : typing.Optional[typing.Sequence[UserSavedPaymentDetailsItem]]

        tags : typing.Optional[typing.Sequence[UserTag]]
            Additional information that can be added via tags

        attachments : typing.Optional[typing.Sequence[PersonAttachment]]
            Uploaded user's attachment

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[ConsumerUsersCreateResponse]
            Created
        """
        _response = self._client_wrapper.httpx_client.request(
            "consumer/users",
            method="POST",
            params={
                "lockCraRiskLevel": lock_cra_risk_level,
                "lockKycRiskLevel": lock_kyc_risk_level,
                "validateUserId": validate_user_id,
                "_krsOnly": krs_only,
            },
            json={
                "userId": user_id,
                "createdTimestamp": created_timestamp,
                "activatedTimestamp": activated_timestamp,
                "userDetails": convert_and_respect_annotation_metadata(
                    object_=user_details, annotation=UserDetails, direction="write"
                ),
                "userStateDetails": convert_and_respect_annotation_metadata(
                    object_=user_state_details, annotation=UserStateDetails, direction="write"
                ),
                "kycStatusDetails": convert_and_respect_annotation_metadata(
                    object_=kyc_status_details, annotation=KycStatusDetails, direction="write"
                ),
                "eoddDate": eodd_date,
                "employmentStatus": employment_status,
                "occupation": occupation,
                "legalDocuments": convert_and_respect_annotation_metadata(
                    object_=legal_documents, annotation=typing.Sequence[LegalDocument], direction="write"
                ),
                "contactDetails": convert_and_respect_annotation_metadata(
                    object_=contact_details, annotation=ContactDetails, direction="write"
                ),
                "employmentDetails": convert_and_respect_annotation_metadata(
                    object_=employment_details, annotation=EmploymentDetails, direction="write"
                ),
                "transactionLimits": convert_and_respect_annotation_metadata(
                    object_=transaction_limits, annotation=TransactionLimits, direction="write"
                ),
                "expectedIncome": convert_and_respect_annotation_metadata(
                    object_=expected_income, annotation=ExpectedIncome, direction="write"
                ),
                "riskLevel": risk_level,
                "kycRiskLevel": kyc_risk_level,
                "acquisitionChannel": acquisition_channel,
                "reasonForAccountOpening": reason_for_account_opening,
                "sourceOfFunds": source_of_funds,
                "userSegment": user_segment,
                "pepStatus": convert_and_respect_annotation_metadata(
                    object_=pep_status, annotation=typing.Sequence[PepStatus], direction="write"
                ),
                "lastTransactionTimestamp": last_transaction_timestamp,
                "linkedEntities": convert_and_respect_annotation_metadata(
                    object_=linked_entities, annotation=UserEntityLink, direction="write"
                ),
                "savedPaymentDetails": convert_and_respect_annotation_metadata(
                    object_=saved_payment_details,
                    annotation=typing.Sequence[UserSavedPaymentDetailsItem],
                    direction="write",
                ),
                "tags": convert_and_respect_annotation_metadata(
                    object_=tags, annotation=typing.Sequence[UserTag], direction="write"
                ),
                "attachments": convert_and_respect_annotation_metadata(
                    object_=attachments, annotation=typing.Sequence[PersonAttachment], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ConsumerUsersCreateResponse,
                    parse_obj_as(
                        type_=ConsumerUsersCreateResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        ApiErrorResponse,
                        parse_obj_as(
                            type_=ApiErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        ApiErrorResponse,
                        parse_obj_as(
                            type_=ApiErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        ApiErrorResponse,
                        parse_obj_as(
                            type_=ApiErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def get(
        self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> HttpResponse[UserWithRulesResult]:
        """
        ### GET Consumer User

        `/consumer/user` endpoint allows you to operate on the Consumer User entity.

        Calling `GET /consumer/user/{userId}` will return the entire user payload and rule execution results for the user with the corresponding `userId`

        Parameters
        ----------
        user_id : str


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        HttpResponse[UserWithRulesResult]
            OK
        """
        _response = self._client_wrapper.httpx_client.request(
            f"consumer/users/{jsonable_encoder(user_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UserWithRulesResult,
                    parse_obj_as(
                        type_=UserWithRulesResult,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return HttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        ApiErrorResponse,
                        parse_obj_as(
                            type_=ApiErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        ApiErrorResponse,
                        parse_obj_as(
                            type_=ApiErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        ApiErrorResponse,
                        parse_obj_as(
                            type_=ApiErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncRawConsumerUsersClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def create(
        self,
        *,
        user_id: str,
        created_timestamp: float,
        lock_cra_risk_level: typing.Optional[BooleanString] = None,
        lock_kyc_risk_level: typing.Optional[BooleanString] = None,
        validate_user_id: typing.Optional[BooleanString] = None,
        krs_only: typing.Optional[BooleanString] = None,
        activated_timestamp: typing.Optional[float] = OMIT,
        user_details: typing.Optional[UserDetails] = OMIT,
        user_state_details: typing.Optional[UserStateDetails] = OMIT,
        kyc_status_details: typing.Optional[KycStatusDetails] = OMIT,
        eodd_date: typing.Optional[float] = OMIT,
        employment_status: typing.Optional[EmploymentStatus] = OMIT,
        occupation: typing.Optional[str] = OMIT,
        legal_documents: typing.Optional[typing.Sequence[LegalDocument]] = OMIT,
        contact_details: typing.Optional[ContactDetails] = OMIT,
        employment_details: typing.Optional[EmploymentDetails] = OMIT,
        transaction_limits: typing.Optional[TransactionLimits] = OMIT,
        expected_income: typing.Optional[ExpectedIncome] = OMIT,
        risk_level: typing.Optional[RiskLevel] = OMIT,
        kyc_risk_level: typing.Optional[RiskLevel] = OMIT,
        acquisition_channel: typing.Optional[AcquisitionChannel] = OMIT,
        reason_for_account_opening: typing.Optional[typing.Sequence[str]] = OMIT,
        source_of_funds: typing.Optional[typing.Sequence[SourceOfFunds]] = OMIT,
        user_segment: typing.Optional[ConsumerUserSegment] = OMIT,
        pep_status: typing.Optional[typing.Sequence[PepStatus]] = OMIT,
        last_transaction_timestamp: typing.Optional[float] = OMIT,
        linked_entities: typing.Optional[UserEntityLink] = OMIT,
        saved_payment_details: typing.Optional[typing.Sequence[UserSavedPaymentDetailsItem]] = OMIT,
        tags: typing.Optional[typing.Sequence[UserTag]] = OMIT,
        attachments: typing.Optional[typing.Sequence[PersonAttachment]] = OMIT,
        request_options: typing.Optional[RequestOptions] = None,
    ) -> AsyncHttpResponse[ConsumerUsersCreateResponse]:
        """
        ## POST Consumer User

        `/consumer/user` endpoint allows you to operate on the Consumer user entity.

        In order to pass the payload of a User to Flagright and verify the User, you will need to call this endpoint with the User payload. Not all fields are mandatory, you will only need to pass in the fields that you have and are relevant for your compliance setup.

        ### Payload

        Each consumer user needs two mandatory fields:

        * `userId` - Unique identifier for the user
        * `createdTimestamp` - UNIX timestamp in *milliseconds* for when the User is created in your system

        Parameters
        ----------
        user_id : str
            Unique user ID

        created_timestamp : float
            Timestamp when userId is created

        lock_cra_risk_level : typing.Optional[BooleanString]
            Boolean string whether Flagright should lock the CRA risk level for the user.

        lock_kyc_risk_level : typing.Optional[BooleanString]
            Boolean string whether Flagright should lock the KYC risk level for the user.

        validate_user_id : typing.Optional[BooleanString]
            Boolean string whether Flagright should validate the userId

        krs_only : typing.Optional[BooleanString]

        activated_timestamp : typing.Optional[float]
            Timestamp when user was activated

        user_details : typing.Optional[UserDetails]

        user_state_details : typing.Optional[UserStateDetails]

        kyc_status_details : typing.Optional[KycStatusDetails]

        eodd_date : typing.Optional[float]

        employment_status : typing.Optional[EmploymentStatus]

        occupation : typing.Optional[str]

        legal_documents : typing.Optional[typing.Sequence[LegalDocument]]
            User's legal identity documents - See Document Model for details

        contact_details : typing.Optional[ContactDetails]

        employment_details : typing.Optional[EmploymentDetails]

        transaction_limits : typing.Optional[TransactionLimits]

        expected_income : typing.Optional[ExpectedIncome]

        risk_level : typing.Optional[RiskLevel]

        kyc_risk_level : typing.Optional[RiskLevel]

        acquisition_channel : typing.Optional[AcquisitionChannel]

        reason_for_account_opening : typing.Optional[typing.Sequence[str]]

        source_of_funds : typing.Optional[typing.Sequence[SourceOfFunds]]

        user_segment : typing.Optional[ConsumerUserSegment]

        pep_status : typing.Optional[typing.Sequence[PepStatus]]

        last_transaction_timestamp : typing.Optional[float]
            Timestamp of the last successful transaction of the user

        linked_entities : typing.Optional[UserEntityLink]

        saved_payment_details : typing.Optional[typing.Sequence[UserSavedPaymentDetailsItem]]

        tags : typing.Optional[typing.Sequence[UserTag]]
            Additional information that can be added via tags

        attachments : typing.Optional[typing.Sequence[PersonAttachment]]
            Uploaded user's attachment

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[ConsumerUsersCreateResponse]
            Created
        """
        _response = await self._client_wrapper.httpx_client.request(
            "consumer/users",
            method="POST",
            params={
                "lockCraRiskLevel": lock_cra_risk_level,
                "lockKycRiskLevel": lock_kyc_risk_level,
                "validateUserId": validate_user_id,
                "_krsOnly": krs_only,
            },
            json={
                "userId": user_id,
                "createdTimestamp": created_timestamp,
                "activatedTimestamp": activated_timestamp,
                "userDetails": convert_and_respect_annotation_metadata(
                    object_=user_details, annotation=UserDetails, direction="write"
                ),
                "userStateDetails": convert_and_respect_annotation_metadata(
                    object_=user_state_details, annotation=UserStateDetails, direction="write"
                ),
                "kycStatusDetails": convert_and_respect_annotation_metadata(
                    object_=kyc_status_details, annotation=KycStatusDetails, direction="write"
                ),
                "eoddDate": eodd_date,
                "employmentStatus": employment_status,
                "occupation": occupation,
                "legalDocuments": convert_and_respect_annotation_metadata(
                    object_=legal_documents, annotation=typing.Sequence[LegalDocument], direction="write"
                ),
                "contactDetails": convert_and_respect_annotation_metadata(
                    object_=contact_details, annotation=ContactDetails, direction="write"
                ),
                "employmentDetails": convert_and_respect_annotation_metadata(
                    object_=employment_details, annotation=EmploymentDetails, direction="write"
                ),
                "transactionLimits": convert_and_respect_annotation_metadata(
                    object_=transaction_limits, annotation=TransactionLimits, direction="write"
                ),
                "expectedIncome": convert_and_respect_annotation_metadata(
                    object_=expected_income, annotation=ExpectedIncome, direction="write"
                ),
                "riskLevel": risk_level,
                "kycRiskLevel": kyc_risk_level,
                "acquisitionChannel": acquisition_channel,
                "reasonForAccountOpening": reason_for_account_opening,
                "sourceOfFunds": source_of_funds,
                "userSegment": user_segment,
                "pepStatus": convert_and_respect_annotation_metadata(
                    object_=pep_status, annotation=typing.Sequence[PepStatus], direction="write"
                ),
                "lastTransactionTimestamp": last_transaction_timestamp,
                "linkedEntities": convert_and_respect_annotation_metadata(
                    object_=linked_entities, annotation=UserEntityLink, direction="write"
                ),
                "savedPaymentDetails": convert_and_respect_annotation_metadata(
                    object_=saved_payment_details,
                    annotation=typing.Sequence[UserSavedPaymentDetailsItem],
                    direction="write",
                ),
                "tags": convert_and_respect_annotation_metadata(
                    object_=tags, annotation=typing.Sequence[UserTag], direction="write"
                ),
                "attachments": convert_and_respect_annotation_metadata(
                    object_=attachments, annotation=typing.Sequence[PersonAttachment], direction="write"
                ),
            },
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    ConsumerUsersCreateResponse,
                    parse_obj_as(
                        type_=ConsumerUsersCreateResponse,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        ApiErrorResponse,
                        parse_obj_as(
                            type_=ApiErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        ApiErrorResponse,
                        parse_obj_as(
                            type_=ApiErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        ApiErrorResponse,
                        parse_obj_as(
                            type_=ApiErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def get(
        self, user_id: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> AsyncHttpResponse[UserWithRulesResult]:
        """
        ### GET Consumer User

        `/consumer/user` endpoint allows you to operate on the Consumer User entity.

        Calling `GET /consumer/user/{userId}` will return the entire user payload and rule execution results for the user with the corresponding `userId`

        Parameters
        ----------
        user_id : str


        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        AsyncHttpResponse[UserWithRulesResult]
            OK
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"consumer/users/{jsonable_encoder(user_id)}",
            method="GET",
            request_options=request_options,
        )
        try:
            if 200 <= _response.status_code < 300:
                _data = typing.cast(
                    UserWithRulesResult,
                    parse_obj_as(
                        type_=UserWithRulesResult,  # type: ignore
                        object_=_response.json(),
                    ),
                )
                return AsyncHttpResponse(response=_response, data=_data)
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(
                        ApiErrorResponse,
                        parse_obj_as(
                            type_=ApiErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(
                        ApiErrorResponse,
                        parse_obj_as(
                            type_=ApiErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            if _response.status_code == 429:
                raise TooManyRequestsError(
                    typing.cast(
                        ApiErrorResponse,
                        parse_obj_as(
                            type_=ApiErrorResponse,  # type: ignore
                            object_=_response.json(),
                        ),
                    )
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
